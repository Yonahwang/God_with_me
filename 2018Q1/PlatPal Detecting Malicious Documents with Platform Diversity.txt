PlatPal: Detecting Malicious Documents   with Platform Diversity 

	PlatPal：利用平台多样性检测恶意文档

	Meng Xu and Taesoo Kim, Georgia Institute of Technology https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/xu-meng 

	孟旭和佐治亚理工学院Taesoo Kim https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/xu-meng

	PLATPAL: Detecting Malicious Documents with Platform Diversity 

	平台：利用平台多样性检测恶意文档

	Meng Xu and Taesoo Kim 

	Meng Xu和Taesoo Kim

	Georgia Institute of Technology 

	佐治亚理工学院

	Abstract Due to the continued exploitation of Adobe Reader, malicious document (maldoc) detection has become a pressing problem. Although many solutions have been proposed, recent works have highlighted some common drawbacks, such as parser-confusion and classifier-evasion attacks. 

	摘要由于Adobe Reader的不断开发，恶意文件（maldoc）检测已经成为一个迫切的问题。尽管已经提出了许多解决方案，但最近的作品突出了一些常见的缺陷，例如解析器混淆和分类器规避攻击。

	In response to this, we propose a new perspective for maldoc detection: platform diversity. In particular, we identify eight factors in OS design and implementation that could cause behavioral divergences under attack, ranging from syscall semantics (more obvious) to heap object metadata structure (more subtle) and further show how they can thwart attackers from finding bugs, exploiting bugs, or performing malicious activities. 

	针对这一点，我们提出了一个新的视角maldoc检测：平台的多样性。具体来说，我们确定了操作系统设计和实现中可能导致行为分歧的八个因素，从系统调用语义（更明显）到堆对象元数据结构（更加微妙），并进一步展示如何阻止攻击者发现错误，利用错误或执行恶意活动。

	We further prototype P LATPA L to systematically harvest platform diversity. P LATPA L hooks into Adobe Reader to trace internal PDF processing and also uses sandboxed execution to capture a maldoc’s impact on the host system. Execution traces on different platforms are compared, and maldoc detection is based on the observation that a benign document behaves the same across platforms, while a maldoc behaves differently during exploitation. Evaluations show that P LATPA L raises no false alarms in benign samples, detects a variety of behavioral discrepancies in malicious samples, and is a scalable and practical solution. 1 

	我们进一步对P LATPA L进行了原型系统收集平台多样性。 P LATPA L挂钩到Adobe Reader以跟踪内部PDF处理，并使用沙盒执行捕获maldoc对主机系统的影响。比较不同平台上的执行跟踪，并且maldoc检测基于良性文档在不同平台上表现相同的观察结果，而maldoc在开发过程中表现不同。评估显示，P LATPA L在良性样本中不会产生误报，在恶意样本中检测到各种行为差异，是一种可扩展的实用解决方案。 1

	Introduction Cyber attackers are turning to document-based malware as users wise up to malicious email attachments and web links, as suggested by many anti-virus (AV) vendors [39, 50, 54, 57]. Users are generally warned more on the danger of executable files by browsers, email agents, or AV products, while documents such as PDFs are treated with much less caution and scrutiny because of the impression that they are static files and can do little harm. 

	引言网络攻击者正在转向以文档为基础的恶意软件，正如许多反病毒厂商所建议的那样，用户可以根据恶意的电子邮件附件和网页链接进行判断[39,50,54,57]。用户通常会被浏览器，电子邮件代理或AV产品更多地警告可执行文件的危险，而像PDF这样的文档由于受到静态文件的影响而受到的关注和审查要少得多，并且几乎没有什么危害。

	However, over time, PDF specifications have changed. 

	但是，随着时间的推移，PDF规格已经改变。

	The added scripting capability makes it possible for documents to work in almost the same way as executables, including the ability to connect to the Internet, run processes, and interact with other files/programs. The growth of content complexity gives attackers more weapons to launch powerful attacks and more flexibility to hide malicious payload (e.g., encrypted, hidden as images, fonts or Flash contents) and evade detection. 

	增加的脚本功能可以使文档以与可执行文件几乎相同的方式工作，包括连接到Internet的能力，运行进程以及与其他文件/程序进行交互。内容复杂性的增长为攻击者提供了更多的武器来发动强大的攻击，并且更加灵活地隐藏恶意负载（例如加密，隐藏为图像，字体或Flash内容）并逃避检测。

	A maldoc usually exploits one or more vulnerabilities in its interpreter to launch an attack. Fortunately (or unfortunately), given the increasing complexity of document readers and the wide library/system component dependencies, attackers are presented with a large attack surface. New vulnerabilities continue to be found, with 137 published CVEs in 2015 and 227 in 2016 for Adobe Acrobat Reader (AAR) alone. The popularity of AAR and its large attack surface make it among the top targets for attackers [25], next to browsers and OS kernels. 

	一个maldoc通常利用其解释器中的一个或多个漏洞发起攻击。幸运的是（或者不幸的是），鉴于文档阅读器越来越复杂以及库/系统组件的依赖性越来越大，攻击者的攻击面越来越大。新的漏洞继续被发现，在2015年发布了137个CVE，在2016年仅有Adobe Acrobat Reader（AAR）。 AAR的普及及其大型攻击面使其成为攻击者的首要攻击目标[25]，其次是浏览器和操作系统内核。

	After the introduction of a Chrome-like sandboxing mechanism [2], a single exploit can worth as high as $70k in pwn2own contest [21]. The collected malware samples have shown that many Adobe components have been exploited, including element parsers and decoders [37], font managers [28], and the JavaScript engine [22]. Systemwide dependencies such as graphics libraries [23] are also on attackers’ radar. 

	在引入了一个类似于Chrome的沙盒机制之后[2]，在pwn2own比赛中，单个漏洞的价值可能高达7万美元[21]。收集的恶意软件样本显示，许多Adobe组件已被利用，包括元素解析器和解码器[37]，字体管理器[28]以及JavaScript引擎[22]。系统范围的依赖性，如图形库[23]也在攻击者的雷达。

	The continued exploitation of AAR along with the ubiquity of the PDF format makes maldoc detection a pressing problem, and many solutions have been proposed in recent years to detect documents bearing malicious payloads. These techniques can be classified into two broad categories: static and dynamic analysis. 

	随着PDF格式的普及，AAR的持续开发使得马尔科夫检测成为一个紧迫的问题，并且近年来已经提出了许多解决方案来检测具有恶意有效载荷的文档。这些技术可以分为两大类：静态和动态分析。

	Static analysis, or signature-based detection [14, 27, 31, 33, 34, 36, 46, 52, 59], parses the document and searches for indications of malicious content, such as shellcode or similarity with known malware samples. On the other hand, dynamic analysis, or execution-based detection [45, 

	静态分析或基于签名的检测[14,27,31,33,34,36,46,52,59]解析文档并搜索恶意内容的指示，例如shellcode或与已知恶意软件样本的相似性。另一方面，动态分析或基于执行的检测[45，

	48, 58], runs partial or the whole document and traces for malicious behaviors, such as vulnerable API calls or return-oriented programming (ROP). 

	48，58]运行部分或整个文档，并跟踪恶意行为，如易受攻击的API调用或返回式编程（ROP）。

	USENIX Association 

	USENIX协会

	26th USENIX Security Symposium    271 

	第二十六届USENIX安全研讨会271

	However, recent works have highlighted some common drawbacks of these solutions. Carmony et al. [11] show that the PDF parsers used in these solutions might have overly simplified assumptions about the PDF specifications, leading to an incomplete extraction of malicious payloads and failed analysis. It has also been demonstrated that machine-learning-based detection could potentially be evaded in principled and automatic ways [35, 53, 65]. In addition, many solutions focus only on the 

	然而，最近的作品突出了这些解决方案的一些共同的缺点。 Carmony等人[11]表明，在这些解决方案中使用的PDF解析器可能已经过分简化了关于PDF规范的假设，导致恶意负载的不完整提取和分析失败。也已经证明，基于机器学习的检测有可能以原理和自动的方式被回避[35,53,65]。另外，许多解决方案只关注于

	JavaScript parts and ignore their synergy with other PDF components in launching attacks. Therefore, even though modern AV products support PDF-exploit detection, they cannot quickly adapt to novel obfuscation techniques even if the latter constitute only minor modifications of existing exploits [55]. AV products also exhibit problems providing protection against zero-day attacks, due to the lack of attack procedures and runtime traces. 

	JavaScript部分，并忽略与其他PDF组件发起攻击的协同作用。因此，尽管现代AV产品支持PDF漏洞检测，但即使后者仅对现有漏洞进行微小的修改，他们也不能快速适应新颖的模糊技术[55]。由于缺乏攻击程序和运行时间跟踪，AV产品还会出现提供零日攻击保护的问题。

	In this paper, we propose P LATPA L, a maldoc detection scheme that analyzes the behavioral discrepancies of malicious document files on different platforms (e.g., 

	在本文中，我们提出了P LATPA L，一种用于分析不同平台上的恶意文档文件的行为差异的maldoc检测方案（例如，

	Windows or Macintosh (Mac)). Unlike the static and dynamic detection schemes that rely on existing malware samples to construct heuristics, P LATPA L is based on a completely different set of insights: 1) a benign document behaves the same (in a certain level) across platforms, while 2) a malicious document causes diverged behaviors when launching exploits on different platforms. 

	Windows或Macintosh（Mac））。与依靠现有恶意软件样本构建启发式的静态和动态检测方案不同，P LATPA L基于一套完全不同的见解：1）良性文档在不同平台上表现相同（在一定水平上），而2）恶意文件在不同的平台上启动漏洞时会导致不同的行为。

	The first assumption can be empirically verified by opening many benign samples that use a variety of PDF features across platforms. To support the second assumption, we investigated the factors in OS implementation that could cause behavioral divergences when under attack and identified eight such factors, ranging from syscall semantics (more obvious) to heap object metadata structure (more subtle). We further show how they can be used to thwart attackers in finding bugs, exploiting bugs, or performing malicious activities. 

	第一个假设可以通过打开许多使用跨平台的各种PDF功能的良性样本进行实证验证。为了支持第二个假设，我们调查了OS受到攻击时可能导致行为分歧的因素，并从系统调用语义（更明显）到堆对象元数据结构（更精细）等8个因素中找到了这些因素。我们进一步展示了如何利用它们阻止攻击者发现错误，利用错误或执行恶意活动。

	P LATPA L is based on these insights. To detect whether a document has malicious payload, P LATPA L opens it with the same version of AAR instances, but running on top of different operating systems. P LATPA L records the runtime traces of AAR while processing the document and subsequently compares them across platforms. Consensus in execution traces and outputs indicates the health of the document, while divergences signal an attack. 

	P LATPA L基于这些见解。为了检测文档是否有恶意负载，P LATPA L使用相同版本的AAR实例打开它，但是在不同的操作系统上运行。 P LATPA L在处理文档时记录AAR的运行时间跟踪，并随后在各个平台上进行比较。执行轨迹和产出的共识表明文件的健康，而分歧则表示攻击。

	Although the process sounds simple and intuitive, two practical questions need to be addressed to make P LATPA L work: 1) what “behaviors” could be potentially different on different platforms? and 2) how can they be universally traced? P LATPA L traces and compares two types of behaviors. Internal behaviors include critical functions executed by AAR in the PDF processing cycle, such as loading, parsing, rendering, and script execution. External behaviors include filesystem operations, network activities, and program launches. This aligns with typical malware analysis tools such as Cuckoo sandbox [44]. 

	虽然这个过程听起来简单直观，但是需要解决两个实际问题，使得LATPA L能够工作：1）在不同的平台上，“行为”可能会有什么不同？ 2）他们如何被普遍追踪？ P LATPA L跟踪和比较两种类型的行为。内部行为包括AAR在PDF处理周期中执行的关键功能，如加载，解析，呈现和脚本执行。外部行为包括文件系统操作，网络活动和程序启动。这与典型的恶意软件分析工具，如杜鹃沙箱[44]。

	It is worth highlighting that P LATPA L should not be considered as a competitor to current malware analysis tools such as Cuckoo [44] as they rely on different assumptions. Current tools rely heavily on the availability of a blacklist (or whitelist) of OS-wide activities are already available such that a sample’s behaviors can be vetted against the list. This approach works well for known malware but might lost its advantage against 0-day PDF exploits. On the other hand, P LATPA L does not require the such a list to function and only relies on the fact that it is difficult for an attacker to craft a malicious PDF that exploits AAR in exactly the same way in both Windows and Mac platforms. 

	值得强调的是，P LATPA L不应被视为当前的恶意软件分析工具（如Cuckoo [44]）的竞争对手，因为它们依赖于不同的假设。目前的工具在很大程度上依赖于OS范围的活动的黑名单（或白名单）的可用性，因此可以对样本的行为进行审查。这种方法适用于已知的恶意软件，但可能会在0天的PDF漏洞攻击中丧失优势。另一方面，P LATPA L并不要求这样的列表起作用，而仅仅依赖于攻击者很难在Windows和Mac平台上以完全相同的方式制作一个利用AAR的恶意PDF。

	P LATPA L is evaluated against 1030 benign samples that use various features in the PDF specifications and reports no discrepancies in their traces, i.e., no false alarms. For a collection of 320 maldoc samples exploiting 16 different CVEs, P LATPA L can detect divergences in 209 of them with an additional 34 samples crashing both AAR instances. The remainder are undetected for various reasons, such as targeting an old and specific version of AAR or failure to trigger malicious activities. P LATPA L can finish a scan of the document in no more than 24 seconds per platform and requires no manual driving. Paper contribution. In summary, this paper makes the following contributions: 

	P LATPA L是针对使用PDF规范中的各种特征的1030个良性样本进行评估的，并且报告没有差异，即没有误报。对于使用16个不同CVE的320个maldoc样本的集合，P LATPA L可以检测209个样本中的差异，另外34个样本使两个AAR实例崩溃。其余部分由于各种原因而未被发现，例如针对旧的和特定版本的AAR或未触发恶意活动。 P LATPA L可以在每个平台不超过24秒内完成文件的扫描，不需要手动驾驶。纸张贡献。总之，本文做出如下贡献：

	• We propose to execute a document across different platforms and use behavioral discrepancies as an indicator for maldoc detection. 

	•我们建议跨不同平台执行文档，并使用行为差异作为maldoc检测的指标。

	• We perform in-depth analysis and categorization of platform diversities and show how they can be used to detect maldoc attacks. 

	•我们对平台多样性进行深入分析和分类，并展示它们如何用于检测Maldoc攻击。

	• We prototype P LATPA L based on these insights. Evaluations prove that P LATPA L is scalable, does not raise false alarms, and detects a variety of behavioral discrepancies in malicious samples. 

	•我们根据这些见解对P LATPA L进行了原型设计。评估证明，P LATPA L是可扩展的，不会引起误报，并检测恶意样本中的各种行为差异。

	We plan to open source P LATPA L to prompt using platform diversity for maldoc detection and also launch a PDF maldoc scanning service for public use. 2 Maldoc Detection: A Survey Existing maldoc detection methods can be classified broadly into two categories: 1) dynamic analysis, in which malicious code is executed and examined in a specially instrumented environment; and 2) static analysis, in which the detection is carried out without code execution. A summary of existing methods is presented in Table 1. 

	我们计划开源P LATPA L，以提示使用平台多样性进行maldoc检测，并启动一个PDF maldoc扫描服务供公众使用。 2马尔多克检测：调查现有的马尔多克检测方法大致可以分为两类：1）动态分析，在特定的仪器环境下执行和检查恶意代码;和2）静态分析，其中执行检测而不执行代码。表1列出了现有方法的总结。

	272    26th USENIX Security Symposium 

	272第二十六届USENIX安全研讨会

	USENIX Association 

	USENIX协会

	Category 

	类别

	Focus 

	焦点

	Detection Technique 

	检测技术

	Parser ? ML ? 

	解析器？ ML？

	Pattern ? 

	模式？

	Evasion / Drawbacks Static Dynamic JavaScript JavaScript JavaScript JavaScript Metadata Metadata Metadata Both Lexical analysis [27] Token clustering [59] API reference classification [14] Shellcode and opcode signature [31] Linearized object path [36] Hierarchical structure [33, 52] Content meta-features [46] Many above-mentioned heuristics [34] 

	回避/缺点静态动态JavaScript JavaScript JavaScript JavaScript元数据元数据元数据二者词汇分析令牌集群API参考分类Shellcode和操作码签名线性化对象路径分层结构内容元特征[46]上面提到的许多启发式[34]

	JavaScript 

	JavaScript的

	Shellcode and opcode signature [58] 

	Shellcode和操作码签名[58]

	JavaScript 

	JavaScript的

	Known attack patterns [45] JavaScript Memory access patterns [48] JavaScript 

	已知的攻击模式[45] JavaScript内存访问模式[48] JavaScript

	Common maldoc behaviors [29] 

	常见的maldoc行为[29]

	Document 

	文件

	Violation of memory access invariants [62] Yes Yes Yes 

	违反内存访问不变量[62]是是是

	No Yes Yes Yes Yes Yes Yes Yes No No Yes Yes Yes 

	否是是是是是是是否否是是是

	No Yes Yes Yes Yes No No No No No Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes 

	否是是是是否否否否否是是是是是是是是是是是是

	No Heavy obfuscation, Code loading Mimicry [53], Reverse mimicry [35] Incompatible JS engine, Non-script based attacks Zero-day exploits ROP and JIT-Spraying 

	没有沉重的迷惑，代码加载模仿[53]，反向模仿[35]不兼容的JS引擎，基于非脚本的攻击零日漏洞利用ROP和JIT-Spraying

	Table 1: A taxonomy of malicious PDF document detection techniques. This taxonomy is partially based on a systematic survey paper [40] with the addition of works after 2013 as well as summaries parser, machine learning, and pattern dependencies and evasion techniques. 2.1 Static Techniques One line of static analysis work focuses on JavaScript content for its importance in exploitation, e.g., a majority 

	表1：恶意PDF文档检测技术的分类。这种分类法部分基于系统的调查报告[40]，增加了2013年以后的作品以及摘要分析器，机器学习，模式依赖和回避技术。 2.1静态技术一行静态分析工作关注于JavaScript内容的重要性，例如大多数

	(over 90% according to [58]) of maldocs use JavaScript to complete an attack. PJScan [27] relies on lexical coding styles like the number of variable names, parenthesis, and operators to differentiate benign and malicious JavaScript code. Vatamanu et al. [59] tokenizes JavaScript code into variables types, function names, operators, etc. and constructs clusters of tokens as signatures for benign and malicious documents. Similarly, Lux0r [14] constructs two sets of API reference patterns found in benign and malicious documents, respectively, and uses this to classify maldocs. MPScan [31] differs from other JavaScript static analyzers in a way that it hooks AAR and dynamically extracts the JavaScript code. However, given that code analysis is still statically performed, we consider it a static analysis technique. 

	（根据[58] 90％以上）maldocs使用JavaScript来完成攻击。 PJScan [27]依靠词汇编码风格，如变量名称，括号和运算符的数量来区分良性和恶意的JavaScript代码。 Vatamanu等人[59]将JavaScript代码标记为变量类型，函数名称，运算符等，并将令牌集群构建为良性和恶意文档的签名。类似地，Lux0r [14]分别构造了两组在良性和恶意文档中发现的API参考模式，并用它来对maldocs进行分类。 MPScan [31]与其他JavaScript静态分析器的区别在于，它钩住了AAR并动态地提取了JavaScript代码。但是，鉴于代码分析仍然是静态执行的，我们认为它是一种静态分析技术。

	A common drawback of these approaches is that they can be evaded with heavy obfuscation and dynamic code loading (except for [31] as it hooks into AAR at runtime). Static parsers extract JavaScript based on pre-defined rules on where JavaScript code can be placed/hidden. However, given the flexibility of PDF specifications, it is up to an attacker’s creativity to hide the code. 

	这些方法的一个共同的缺点是，它们可以通过沉重的模糊处理和动态代码加载（除了[31]，因为它在运行时挂钩到AAR中）。静态解析器根据JavaScript代码可以放置/隐藏的位置的预定义规则提取JavaScript。但是，考虑到PDF规范的灵活性，攻击者的创意隐藏了代码。

	The other line of work focuses on examining PDF file metadata rather than its actual content. This is partially inspired by the fact that obfuscation techniques tend to abuse the flexibility in PDF specifications and hide malicious code by altering the normal PDF structure. PDF Malware Slayer [36] uses the linearized path to specific PDF elements (e.g., /JS, /Page, etc) to build maldoc classifiers. Srndic et al. [52] and Maiorca et al. [33] go one step further and also use the hierarchical structure for classification. PDFrate [46] includes another set of features such as the number of fonts, the average length of streams, etc. to improve detection. Maiorca et al. [34] focuses on both JavaScript and metadata and fuses many of the above-mentioned heuristics into one procedure to improve evasion resiliency. 

	另一个工作重点是检查PDF文件元数据，而不是其实际内容。部分原因在于混淆技术倾向于滥用PDF规范中的灵活性，并通过改变正常的PDF结构来隐藏恶意代码。 PDF Malware Slayer [36]使用特定PDF元素的线性化路径（例如，/ JS，/ Page等）来构建maldoc分类器。 Srndic等人[52]和Maiorca等。 [33]更进一步，也使用分层结构进行分类。 PDFrate [46]包含另一组功能，如字体数量，流的平均长度等 ，以改善检测。 Maiorca等人[34]关注JavaScript和元数据，并将许多上述启发式算法融合到一个程序中，以提高逃避弹性。

	All methods are based on the assumption that the normal PDF element hierarchy is distorted during obfuscation and new paths are created that could not normally exist in benign documents. However, this assumption is challenged by two attacks. Mimicus [53] implements mimicry attacks and modifies existing maldocs to appear more like benign ones by adding empty structural and metadata items to the documents with no actual impact on rendering. Reverse mimicry [35] attack, on the contrary, attempts to embed malicious content into a benign PDF by taking care to modify it as little as possible. 2.2 Dynamic Techniques 

	所有的方法都是基于这样的假设：在混淆期间正常的PDF元素层次结构是失真的，并且创建了在良性文档中通常不存在的新路径。但是，这个假设受到两次攻击的挑战。 Mimicus [53]通过在文档中添加空的结构和元数据项目来实现模仿攻击并修改现有的maldoc，使其看起来更像良性，而对渲染没有实际的影响。相反，反向模仿[35]攻击尝试将恶意内容嵌入到良性PDF中，注意尽可能少地修改恶意内容。 2.2动态技术

	All surveyed dynamic analysis techniques focus on embedded JavaScript code only instead of the entire document. MDScan [58] executes the extracted JavaScript code on a customized SpiderMonkey interpreter and the interpreter’s memory space is constantly scanned for known forms of shellcode or malicious opcode sequences. PDF Scrutinizer [45] takes a similar approach by hooking the Rhino interpreter and scans for known malicious code patterns such as heap spray, shellcode, and vulnerable method calls. ShellOS [48] is a lightweight OS designed to run JavaScript code and record its memory access patterns. During execution, if the memory access sequences match a known malicious pattern (e.g., ROP, critical syscalls or function calls, etc), the script is considered malicious. 

	所有被调查的动态分析技术都只关注嵌入式JavaScript代码，而不是整个文档。 MDScan [58]在一个定制的SpiderMonkey解释器上执行提取的JavaScript代码，不断扫描解释器的存储空间寻找已知形式的shellcode或恶意操作码序列。 PDF Scrutinizer [45]通过钩住Rhino解释器并扫描已知的恶意代码模式（如堆喷，shellcode和易受攻击的方法调用），采取了类似的方法。 ShellOS [48]是一个轻量级的操作系统，旨在运行JavaScript代码并记录其内存访问模式。在执行期间，如果存储器访问序列匹配已知的恶意模式（例如，ROP，关键系统调用或函数调用等），则该脚本被认为是恶意的。

	Although these techniques are accurate in detecting malicious payload, they suffer from a common problem: 

	虽然这些技术在检测恶意有效载荷方面是准确的，

	USENIX Association 

	USENIX协会

	26th USENIX Security Symposium    273 an incompatible scripting environment. AAR’s JavaScript engine follows not only the ECMA standard [18], but also the Acrobat PDF standard [1] (e.g., Adobe DOM elements). Therefore, without emulation, objects like doc, app, or even this (which are very common in both benign and malicious documents) will not function correctly. In addition, malicious payload can be encoded as a font or an image object in the document [37], which will neither be extracted nor detected. Certain attacks might also exploit the memory layout knowledge such as the presence of ROP gadgets or functions available in AAR and its dependent libraries, which is hard to emulate in an external analysis environment. 

	第26届USENIX安全研讨会273是一个不兼容的脚本环境。 AAR的JavaScript引擎不仅遵循ECMA标准[18]，还遵循Acrobat PDF标准[1]（例如，Adobe DOM元素）。因此，如果没有仿真，像doc，app，甚至是这样的对象（这在良性和恶意文档中都很常见）将无法正确运行。另外，恶意负载可以被编码为文档[37]中的字体或图像对象，其既不会被提取也不会被检测到。某些攻击也可能利用内存布局方面的知识，例如AAR及其相关库中存在的ROP小工具或功能，这在外部分析环境中很难模拟。

	Instead of emulating the JavaScript execution environment, Liu et al. [29] instruments the PDF document with context monitoring code and uses AAR’s own runtime to execute JavaScript code and hence is not affected by the incompatibility problem. However, the instrumented code only monitors common and known patterns of malicious behavior such as network accesses, heap-spraying, and DLL-injection, etc, which are not fully generic and have to be extended when new anti-detection measures of malicious code come up. CWXDetector [62] proposes a 

	Liu等人不是模拟JavaScript执行环境， [29]使用上下文监视代码来处理PDF文档，并使用AAR自己的运行时执行JavaScript代码，因此不受不兼容性问题的影响。但是，仪表代码只监视常见的和已知的恶意行为模式，如网络访问，堆喷，DLL注入等，这些都不是完全通用的，需要在新的恶意代码反检测措施向上。   [62]提出了一个

	W⊕X-like approach to detect illegitimate code injected by maldocs during execution. But similar to W⊕X, its effectiveness is compromised in the presence of ROP and 

	W⊕X类似的方法来检测在执行过程中由maldocs注入的非法代码。但是与W⊕X类似，在ROP和ROP存在的情况下，它的有效性受到了损害

	JIT-spraying. 2.3 Summary and Motivations Parser reliance. Surveying the maldoc detection techniques yields several interesting observations: 

	JIT喷涂。 2.3总结和动机解析器的依赖。调查maldoc检测技术产生了一些有趣的观察：

	Since a document consists of both data (e.g., text) and executable (e.g., script) components, a common pattern is to first extract the executable components and further examine them with either static or dynamic analysis. To this end, a parser that is capable of parsing PDF documents the same way as AAR does is generally assumed. As shown in Table 1, all but three methods use either open-sourced or their home-grown parsers and assume their capability. However, Carmony et al. [11] shows that these parsers are typically incomplete and have oversimplified assumptions in regard to where 

	由于文档由数据（例如文本）和可执行文件（例如，脚本）组成，所以常见模式是首先提取可执行组件，并进一步用静态或动态分析来检查它们。为此，通常假设能够以与AAR相同的方式解析PDF文档的解析器。如表1所示，除了三种方法外，其他所有方法都使用开源或自行开发的解析器，并假定其功能。但是，Carmony等人[11]表明，这些解析器通常是不完整的，并在哪里有简单的假设

	JavaScript can be embedded, therefore, parser confusion attacks can be launched to easily evade their detection. Machine learning reliance. Machine learning techniques are heavily used in maldoc detection, especially in static analysis, because of their ability in classification/clustering without prior knowledge of the pattern. 

	JavaScript可以嵌入，因此，解析器可以启动混淆攻击，轻松逃避检测。机器学习依赖。机器学习技术在maldoc检测中被大量使用，特别是在静态分析中，由于其在分类/聚类方面的能力，而没有事先了解该模式。

	As shown in Table 1, seven out of 13 methods use machine learning to differentiate benign and malicious documents, while another four methods can also be converted to use machine learning for heuristics mining. However, recently proposed adversarial machine learning techniques [20, 42, 65] raise serious doubts about the effectiveness of classifiers based on superficial features in the presence of adversaries. For example, Xu et al. [65] is capable of automatically producing evasive maldoc variants without knowledge about the classifier, in a way similar to genetic programming. Structural/behavioral discrepancy. 

	如表1所示，13种方法中有7种使用机器学习来区分良性和恶意文档，另外4种方法也可以转换为使用机器学习进行启发式挖掘。然而，最近提出的对抗机器学习技术[20,42,65]在对手面前基于表面特征的分类器的有效性引起了严重的怀疑。例如，徐等人。 [65]能够以类似于遗传编程的方式自动产生不具有关于分类器的知识的回避maldoc变体。结构/行为差异。

	An implicit assumption in the surveyed methods is that structural/behavioral discrepancies exist between benign and malicious documents and such discrepancies can be observed. Since the document must follow a public format specification, commonalities (structural or behavioral) are expected in benign documents. If a document deviates largely from the specification or the common patterns of benign samples, it is more likely to be a malicious document. However, such an assumption is challenged by the Mimicus [53] and reverse mimicry [35] attacks in a way that a maldoc can systematically evades detection if an attacker knows the patterns used to distinguish benign and malicious documents. In addition, deriving the discrepancy patterns requires known malware samples. 

	在调查的方法中隐含的假设是良性文件和恶意文件之间存在结构/行为差异，并且可以观察到这种差异。由于文件必须遵循公共格式规范，所以在良性文件中预期共同性（结构或行为）。如果一个文件很大程度上偏离了良性样本的规范或常见模式，则更可能是一个恶意文件。然而，Mimicus [53]和反向模仿[35]攻击以这样的假设提出质疑，即如果攻击者知道用于区分良性和恶意文档的模式，则maldoc可以系统地避开检测。另外，导出差异模式需要已知的恶意软件样本。

	Therefore, all but one methods in Table 1 require known malware samples either to learn patterns automatically or to manually define patterns based on heuristics, expectations, or experience. This restricts their capabilities in detecting zero-day attacks where no prior knowledge can be obtained. Full dynamic analysis. It is worth noting that only one dynamic detection method performs analysis on the entire file; instead, the rest of the methods perform analysis on the extracted JavaScript code only. This is in contrast with traditional sandboxed malware analysis such as Cuckoo [44] or CWSandbox [63], which executes the malware and examines its behavior and influence on the host operating system during runtime. One reason could be because the maldoc runs on top of AAR, which itself is a complex software and leaves a large footprint on the host system. The traces of maldoc execution are hidden in the large footprint, making analysis much harder. Motivation. The development of P LATPA L is motivated by the above-mentioned problems in maldoc detection research. We design P LATPA L to: 1) share the same view of the document as the intended interpreter (i.e., AAR in this paper); 2) use simple heuristics that do not rely on machine learning; 3) detect zero-day attacks without prior knowledge; 4) capture the maldoc’s influence on the host system; and 5) be complementary to the surveyed techniques to further raise the bar for maldoc attackers. 3 Platform Diversity This section focuses on understanding why platform diversity can be an effective approach in detecting maldoc 

	因此，表1中的所有方法都需要已知的恶意软件样本，以自动学习模式或基于启发式，期望或经验手动定义模式。这限制了他们检测零日攻击的能力，而这些攻击在没有获得任何先验知识的情况下得以实现全面的动态分析。值得注意的是，只有一种动态检测方法对整个文件进行分析，相反，其余的方法只对提取的JavaScript代码执行分析。这与传统的沙盒式恶意软件分析（如Cuckoo [44]或CWSandbox [63]）形成鲜明对比，后者执行恶意软件，并在运行时检查其行为和对主机操作系统的影响。一个原因可能是因为maldoc运行在AAR之上，AAR本身是一个复杂的软件，在主机系统上留下了很大的空间。 maldoc执行的痕迹隐藏在大的脚印中，使分析更加困难。动机。 P LATPA L的发展受到了马尔多克检测研究中上述问题的启发。我们设计P LATPA L：1）与预期的翻译人员（即本文中的AAR）分享相同的文档视图; 2）使用不依赖机器学习的简单启发式; 3）在没有先验知识的情况下检测零日攻击; 4）捕捉maldoc对主机系统的影响; 5）对所调查的技术进行补充，以进一步提高马尔多克攻击者的防线。 3平台多样性本节重点介绍为什么平台多样性可以成为检测maldoc的有效方法

	274    26th USENIX Security Symposium 

	第二十六届USENIX安全研讨会

	USENIX Association 

	USENIX协会

	Calling conventions. Besides syscalls, the calling convention (i.e., argument passing registers) for userspace function differs, too. While Windows platforms use rcx, rdx, and r8 to hold the first three parameters, Mac platforms use rdi, rsi, and rdx. This makes ROP-like attacks almost impossible, as the gadgets to construct these attacks are completely different. Library dependencies. The different sets of libraries loaded by AAR block two types of exploits: 1) exploits that depend on the existence of vulnerabilities in the loaded libraries, e.g., graphics libraries, font manager, or libc, as they are all implemented differently on Windows and Mac platforms; and 2) exploits that depend on the existence of certain functions in the loaded libraries, e.g., LoadLibraryA, or dlopen. Memory layout. The offset from the attack point (e.g., the address of the overflowed buffer or the integer value controlled by an attacker) to the target point, be it a return address, GOT/PLT entry, vtable entry, or even control data, is unlikely to be the same across platforms. In other words, directing control-flow over to the sprayed code can often be blocked by the discrepancies in memory layouts across platforms. Heap management. Given the wide deployment of 

	调用约定。除了系统调用之外，用户空间函数的调用约定（即参数传递寄存器）也不同。虽然Windows平台使用rcx，rdx和r8来保存前三个参数，但Mac平台使用rdi，rsi和rdx。这使得类似ROP的攻击几乎不可能，因为构建这些攻击的小工具完全不同。库依赖关系。由AAR加载的不同的库集阻止了两种类型的漏洞攻击：1）依赖加载库中的漏洞存在的漏洞，例如图形库，字体管理器或libc，因为它们在Windows和Mac上的实现方式都不相同平台; 2）依赖于加载库中某些函数的存在的利用，例如LoadLibraryA或dlopen。内存布局。从攻击点（例如，溢出缓冲区的地址或攻击者控制的整数值）到目标点的偏移量，不管是返回地址，GOT / PLT条目，vtable条目，还是控制数据跨平台是一样的。换句话说，将控制流引导到喷洒的代码通常可能被跨平台的存储器布局的差异所阻塞。堆管理。鉴于广泛的部署

	ASLR and DEP, a successful heap buffer overflow usually leads first to heap metadata corruption and later exploits the heap management algorithm to obtain access to control data (e.g., vtable). However, heap management techniques are fundamentally different between Windows and Mac platforms. Therefore, the tricks to corrupt metadata structures maintained by segment heap [67] (Windows allocator) will not work in the magazine malloc [5] (Mac allocator) case and vice versa. Executable format. While Windows platforms generally recognize COM, NE, and PE formats, Mac platforms recognize only the Mach-O format. Therefore, maldocs that attempt to load an executable after exploitation will fail. Although “fat binaries” that can run on multiple CPU architectures exist, we are not aware of an executable format (or any wrapper tools) that is capable of running on multiple platforms. Filesystem semantics. Windows uses backslashes ( attacks. We first present a motivating example and then list the identified factors that are important in launching attacks, but are different on Windows and Mac platforms. 

	ASLR和DEP，成功的堆缓冲区溢出通常首先导致堆元数据损坏，然后利用堆管理算法获得对控制数据（例如，vtable）的访问。但是，Windows和Mac平台之间的堆管理技术是根本不同的。因此，破坏段堆[67]（Windows分配器）维护的元数据结构的技巧在杂志malloc [5]（Mac分配器）中不起作用，反之亦然。可执行格式。虽然Windows平台通常识别COM，NE和PE格式，但Mac平台仅识别Mach-O格式。因此，尝试在利用后加载可执行文件的maldoc将会失败。尽管可以在多个CPU架构上运行的“胖二进制文件”存在，但我们并不知道可执行格式（或任何包装工具）能够在多个平台上运行。文件系统语义。 Windows使用反斜杠（攻击）。我们首先给出一个激励性的例子，然后列出在发起攻击中很重要的已识别因素，但在Windows和Mac平台上则不同。

	We further show how to use them to thwart attackers and concretize it with four case studies. We end by discussing platform-detection techniques that a maldoc can use and the precautions P LATPA L should take. 3.1 A Motivating Example In December 2012, researchers published a public proofof-concept exploit for AAR [37]. This exploit attacks a heap overflow vulnerability found in the PDF parser module when parsing an embedded BMP RLE encoded image (CVE-2013-2729). By simply opening the maldoc, the AAR instance on Windows platform (including Windows 7, 8 and 10) is compromised and the attacker can run arbitrary code with the privileges of the compromised process. During our experiment, we ran this exploit on the Windows version of AAR 10.1.4 and reproduced the attack. However, when we opened the same sample with the Mac version of AAR 10.1.4, the attack failed and no malicious activities were observed. 

	我们进一步展示如何使用它们来挫败攻击者，并用四个案例研究来具体化。最后，我们将讨论maldoc可以使用的平台检测技术以及P LATPA L应该采取的预防措施。 3.1一个激励的例子2012年12月，研究人员发表了针对AAR的公开的证明概念漏洞[37]。此解决方案在解析嵌入式BMP RLE编码图像（CVE-2013-2729）时会攻击PDF解析器模块中发现的堆溢出漏洞。通过简单地打开maldoc，Windows平台（包括Windows 7,8和10）上的AAR实例就会受到攻击，攻击者可以利用受感染进程的权限运行任意代码。在我们的实验中，我们在AAR 10.1.4的Windows版本上运行了这个漏洞，并重现了这个攻击。但是，当我们用AAR 10.1.4的Mac版本打开同一个样本时，攻击失败，没有发现恶意活动。

	In fact, in the malware history, Windows has drawn more attraction from attackers than Mac, and the same applies to maldocs. The Windows platform tends to be more profitable because of its market share, especially with enterprise users [38], who heavily use and exchange PDF documents. Therefore, it is reasonable to expect that the majority of maldocs target primarily the Windows platform, as cross-platform exploits are much harder to develop due to the factors discussed later. 

	事实上，在恶意软件的历史上，Windows比Mac更吸引攻击者，maldocs也是如此。由于Windows平台的市场份额，Windows平台往往更有利可图，特别是对于大量使用和交换PDF文档的企业用户[38]。因此，期望大多数maldocs主要针对Windows平台是合理的，因为跨平台攻击由于后面讨论的因素而难以发展。

	The mindset of maldoc attackers and the discrepancy in reacting to malicious payload among different platforms inspire us to use platform diversity as the heuristic for maldoc detection: a benign document “behaves” the same when opened on different platforms while a maldoc could have different “behaviors” when launching exploits on different platforms. In other words, cross-platform support, the power used to make the PDF format and AAR popular, can now be used to defend against maldoc attacks. 3.2 Diversified Factors 

	maldoc攻击者的心态和对不同平台中恶意负载的反应激励我们使用平台多样性作为maldoc检测的启发：良性文档在不同平台上打开时表现“一样，而maldoc可能有不同的”行为“在不同的平台上启动攻击。换句话说，跨平台的支持，现在可以用来使PDF格式和AAR流行起来，以防御马尔多克攻击。 3.2多元化的因素

	We identified eight factors related to launching maldoc attacks but are implemented differently on Windows and Mac platforms. Syscall semantics. Both syscall numbers and the register set used to hold syscall parameters are different between 

	我们确定了与启动maldoc攻击相关的八个因素，但在Windows和Mac平台上的实施方式不同。系统调用语义。这两个系统调用号码和用于保存系统调用参数的寄存器组是不同的

	Windows and Mac platforms. In particular, file, socket, memory, process, and executable operations all have nonoverlapping syscall semantics. Therefore, crafting shellcode that executes meaningfully on both platforms is extremely difficult in practice. that exploits MS Office bugs, or redirecting the user to a malicious website that attacks the Internet Explorer browser. As Mac platforms are not expected to have these programs, such attacks will fail on Mac platforms. 3.3 Attack Categorization 

	Windows和Mac平台。特别是，文件，套接字，内存，进程和可执行操作都具有不重叠的系统调用语义。因此，在两个平台上构建有意义的shellcode在实践中是非常困难的。利用MS Office漏洞，或将用户重定向到攻击Internet Explorer浏览器的恶意网站。由于Mac平台预计不会有这些程序，所以这些攻击在Mac平台上将会失败。 3.3攻击分类

	As shown in Figure 1, a typical maldoc attack consists of three steps: 1) finding vulnerabilities, 2) exploiting them to inject attacker-controlled program logic, and 3) profiting by performing malicious activities such as stealing information, dropping backdoors, C&C, etc. The identified diversity factors in §3.2 can help detect maldocs at different stages. 

	如图1所示，一个典型的maldoc攻击包括三个步骤：1）发现漏洞，2）利用它们注入攻击者控制的程序逻辑，3）通过窃取信息，放弃后门，C＆C，第3.2节中所确定的多样性因素可以帮助检测不同阶段的麦克多克菌。

	In terms of finding vulnerabilities, exploiting vulnerabilities on platform-specific components can obviously be detected by P LATPA L, as the vulnerable components do not exist on the other platform. 

	在查找漏洞方面，P LATPA L明显可以检测到平台特定组件上的漏洞，因为其他平台上不存在易受攻击的组件。

	The exploitation techniques can be divided into two subcategories, based on whether an attack exploits memory errors (e.g., buffer overflow, integer overflow, etc) to hijack control-flow or exploits logic bugs (e.g., JavaScript 

	根据攻击是利用内存错误（例如，缓冲区溢出，整数溢出等）来劫持控制流或利用逻辑错误（例如，JavaScript），可以将开发技术分成两个子类别

	API design flaws). 

	API设计缺陷）。

	Memory-error based control-flow hijacking puts a high requirement on the memory content during exploitation. For example, ROP attacks, which are commonly found in maldoc samples, require specific gadgets and precise information on where to find them in order to make powerful attacks. However, these gadgets and their addresses in memory can be easily distorted by the discrepancies in loaded libraries and memory layouts. 

	基于内存错误的控制流劫持在开发过程中对内存内容提出了很高的要求。例如，在马尔多克样本中常见的ROP攻击，需要特定的小工具和精确的信息，以便在哪里找到它们，以便进行强大的攻击。但是，这些小工具和他们在内存中的地址很容易被加载库和内存布局的差异所扭曲。

	On the other hand, exploiting features that are naturally cross-platform supported, e.g., JavaScript hidden 

	另一方面，利用自然跨平台支持的功能，例如JavaScript隐藏

	API attacks or abusing the structure of PDF document to obfuscate malicious payload, are not subject to the intricacies of runtime memory contents and are more likely to succeed. 

	API攻击或滥用PDF文档的结构来混淆恶意负载，不受运行时内存内容复杂的影响，更有可能成功。

	Finally, even if an attacker succeeds in the first two steps, the attack can be detected while the maldoc is performing malicious activities, such as executing a syscall, loading a PE-format executable on Mac platforms, or accessing a file that exists only on Windows platforms. 3.4 Case Studies 

	最后，即使攻击者在前两步中成功，攻击也可以在maldoc执行恶意活动时检测到，例如执行系统调用，在Mac平台上加载PE格式的可执行文件，或访问仅存在于Windows平台。 3.4案例研究

	We use representative examples to show how platform diversity can be used to detect maldoc attacks in each step shown in Figure 1. Platform-specific bug. One source of platform-specific bugs comes from system libraries that are used by AAR. 

	我们用代表性的例子来展示如何在图1所示的每个步骤中使用平台多样性来检测maldoc攻击。平台特定的错误。平台特定错误的一个来源来自AAR使用的系统库。

	An example is CVE-2015-2426, an integer overflow bug in the Windows Adobe Type Manager Library. A detailed study can be found at [28]. 

	一个示例是CVE-2015-2426，Windows Adob​​e Type Manager Library中的整数溢出错误。详细的研究可以在[28]找到。

	In this case, opening the maldoc sample on Windows platforms will trigger the exploitation, while nothing will happen when opening it on Mac platforms. In other words, maldocs that exploit bugs in dependent libraries will surely fail on other platforms. 

	在这种情况下，在Windows平台上打开maldoc示例将触发利用，而在Mac平台上打开时没有任何事情发生。换句话说，利用依赖库中的错误的maldocs肯定会在其他平台上失败。

	Another source of bugs comes from the AAR implementation itself, and we also found a few cases where the implementation of the same function can be vulnerable on one platform but safe on the other. For example, CVE-2016-4119 is a use-after-free vulnerability in the zlib deflating algorithm used by AAR to decompress embedded images [30]. The Mac version of AAR is able to walk through the document and exit gracefully, while AAR on Windows crashes during the rendering stage. A closer look at their execution shows that the decoded image objects are different on these platforms. Memory error. Due to the deployment of ASLR and DEP in modern operating systems, direct shellcode injection cannot succeed. As a result, attackers exploiting memory errors generally require some form of heap preparation to obtain read/write accesses to control data, and the most common target we observed is vtable. 

	AAR实现本身也是错误的另一个来源，同时我们也发现了一些情况，在同一个平台上实现相同的功能可能容易受到攻击，而在另一个平台上却是安全的。例如，CVE-2016-4119是AAR用于解压缩嵌入图像的zlib缩小算法中的一个免费使用漏洞[30]。 AAR的Mac版本能够遍历文档并正常退出，而Windows上的AAR在渲染阶段崩溃。仔细看看它们的执行情况，可以看出解码的图像对象在这些平台上是不同的。内存错误。由于在现代操作系统中部署了ASLR和DEP，直接的shellcode注入不能成功。因此，利用内存错误的攻击者通常需要某种形式的堆准备来获得对控制数据的读/写访问，并且我们观察到的最常见的目标是vtable。

	In the case of [37], the maldoc sample exploits CVE2013-2729, an integer overflow bug in AAR itself, to prepare the heap to obtain access to a vtable associated with an image object. In particular, it starts by allocating 1000 consecutive memory chunks, each of 300 bytes, a value carefully selected to match the size of the vtable, and subsequently free one in every 10 chunks to create a few holes. It then uses a malformed BMP image of 300 bytes to trigger the integer overflow bug and manages to override the heap metadata, which resides in an attacker-controlled slot (although the attacker does not know which slot before hand). The malformed BMP image is freed from memory, but what is actually freed is the attacker-controlled slot, because of the heap metadata corruption. Later, when the struct containing a vtable is allocated in the same slot (almost guaranteed because of heap defragmentation), the attacker gains access and hijacks control-flow by overriding vtable entries. 

	在[37]的情况下，maldoc示例利用CVE2013-2729（AAR本身中的整数溢出错误）来准备堆以获得对与图像对象关联的vtable的访问。具体来说，它首先分配1000个连续的内存块，每个内存块300个字节，仔细选择一个值来匹配vtable的大小，然后在每10个块中释放一个来创建几个洞。然后，它使用300字节的畸形BMP图像来触发整数溢出错误，并设法覆盖驻留在攻击者控制的插槽（尽管攻击者不知道哪个插槽）的堆元数据。畸形BMP图像从内存中释放，但实际释放的是攻击者控制的插槽，因为堆元数据损坏。后来，当包含一个vtable的结构被分配在同一个槽中（几乎可以保证因为堆碎片整理），攻击者通过覆盖vtable条目获得访问和劫持控制流。

	However, this carefully constructed attack has two assumptions, which do not hold across platforms: 1) the size of the vtable on Windows and Mac platforms is different; and 2) the heap object metadata structures are different. As a result, overriding the heap metadata on Mac platform yields no observable behaviors. Logic bugs. Another common attack vector of AAR is the logic bugs, especially JavaScript API design flaws. Unlike attacks that exploit memory errors, JavaScript API attacks generally require neither heap constructions nor ROP-style operations. Instead, they can be launched with as little as 19 lines of JavaScript code, as shown in Figure 2. Gorenc et al. [22] further extends this technique to complete remote code execution attacks by abusing hidden JavaScript APIs. 

	但是，这种精心构建的攻击有两个假设，不跨平台：1）Windows和Mac平台上的vtable的大小是不同的; 2）堆对象的元数据结构是不同的。因此，覆盖Mac平台上的堆元数据不会产生可观察的行为。逻辑错误。 AAR的另一个常见攻击媒介是逻辑错误，尤其是JavaScript API设计缺陷。与利用内存错误的攻击不同，JavaScript API攻击通常既不需要堆结构，也不需要ROP风格的操作。相反，它们可以用19行JavaScript代码来启动，如图2所示。Gorenc et al。 [22]进一步扩展了这种技术，通过滥用隐藏的JavaScript API来完成远程代码执行攻击。

	276    26th USENIX Security Symposium 

	276第二十六届USENIX安全研讨会

	USENIX Association Figure 1: Using platform diversity to detect maldocs throughout the attack cycle. Italic texts near × refers to the factors identified in §3.2 that can be used to detect such attacks. A dash line means that certain attacks might survive after the detection. 1 var t = {}; 2 t.__defineSetter__(’doc’, app.beginPriv); 3 t.__defineSetter__(’user’, app.trustedFunction); 4 t.__defineSetter__(’settings’, function() { throw 1; }); 5 t.__proto__ = app; 6 try { 7 

	USENIX Association图1：在整个攻击周期中使用平台多样性来检测maldoc。 ×附近的斜体文本是指§3.2中可以用来检测这种攻击的因素。虚线表示在检测之后某些攻击可以存活。 1 var t = {}; 2 t .__ defineSetter __（'doc'，app.beginPriv）; 3 t .__ defineSetter __（'user'，app.trustedFunction）; 4 t .__ defineSetter __（'settings'，function（）{throw 1;}）; 5 t .__ proto__ = app; 6试试{7

	DynamicAnnotStore.call(t, null, f); 8 } catch(e) {} 9 10 f(); 11 function f() { app.beginPriv(); var file = ’/c/notes/passwords.txt’; var secret = util.stringFromStream( util.readFileIntoStream(file, 0) ); app.alert(secret); app.endPriv(); 12 13 14 15 16 17 18 19 } Figure 2: CVE-2014-0521 proof-of-concept exploitation Besides being simple to construct, these attacks are generally available on both Windows and Mac platforms because of the cross-platform support of the JavaScript. 

	DynamicAnnotStore.call（t，null，f）; 8} catch（e）{} 9 10 f（）; 11函数f（）{app.beginPriv（）; var file ='/c/notes/passwords.txt'; var secret = util.stringFromStream（util.readFileIntoStream（file，0））; app.alert（秘密）; app.endPriv（）; 12 13 14 15 16 17 18 19}图2：CVE-2014-0521概念验证利用除了构造简单外，由于JavaScript的跨平台支持，这些攻击通常在Windows和Mac平台上都可用。

	Therefore, the key to detecting these attacks via platform diversity is to leverage differences system components such as filesystem semantics, expected installed programs, etc., and search for execution divergences when they are performing malicious activities. For example, line 15 will fail on Mac platforms in the example of Figure 2, as such a file path does not exist on Mac. 3.5 Platform-aware Exploitation document opened, which can be used to check whether the document is opened on Windows or Mac by testing whether the returned path is prefixed with /c/. 

	因此，通过平台多样性来检测这些攻击的关键是利用文件系统语义，预期安装程序等不同系统组件的不同，并在执行恶意活动时寻找执行差异。例如，在图2的示例中，第15行将在Mac平台上失败，因为Mac上不存在这样的文件路径。 3.5打开平台感知利用文件，通过测试返回的路径是否以/ c /为前缀来检查文件是否在Windows或Mac上打开。

	Another way to launch platform-aware attacks is to embed exploits on two platform-specific vulnerabilities, each targeting one platform. In this way, regardless of on which platform the maldoc is opened, one exploit will be triggered and malicious activities can occur. 

	启动平台感知攻击的另一种方法是将攻击嵌入到两个平台特定的漏洞中，每个漏洞都针对一个平台。通过这种方式，无论在哪个平台上打开maldoc，都会触发一个漏洞，恶意活动就会发生。

	In fact, although platform-aware maldocs are rare in our sample collection, P LATPA L must be aware of these attack methods and exercises precautions to detect them. In particular, the possibility that an attacker can probe the platform first before launching the exploit implies that merely comparing external behaviors (e.g., filesystem operations or network activities) might not be sufficient as the same external behaviors might be due to the result of different attacks. Without tracing the internal PDF processing, maldocs can easily evade P LATPA L’s detection using platform-specific exploits, for example, by carrying multiple ROP payloads and dynamically deciding which payload to use based on the return value of app.platform, or even generating ROP payload dynamically using techniques like JIT-ROP [49]. 

	事实上，虽然平台意识的maldocs在我们的样本收集中是罕见的，但是LATPA L必须意识到这些攻击方法并且采取预防措施来检测它们。特别是攻击者在启动攻击之前可以先探测平台的可能性意味着仅仅比较外部行为（例如，文件系统操作或网络活动）可能是不够的，因为相同的外部行为可能是由于不同的攻击。在不追踪内部PDF处理的情况下，maldocs可以使用特定于平台的攻击轻松逃避P LATPA L的检测，例如，通过携带多个ROP负载，并根据app.platform的返回值动态决定使用哪个负载，甚至生成ROP动态使用JIT-ROP [49]等技术。

	However, we do acknowledge that, given the complexity of the PDF specification, P LATPA L does not enumerate all possible platform-probing techniques. Therefore, P LATPA L could potentially be evaded through implicit channels we have not discovered (e.g., timing sidechannel). Given the difficulties of launching maldoc attacks on different platforms with the same payload, what an attacker can do is to first detect which platform the maldoc is running on through explicit or implicit channels and then launch attacks with platform-specific payload. 

	但是，我们确实承认，鉴于PDF规范的复杂性，P LATPA L没有列举所有可能的平台探测技术。因此，P LATPA L可能潜在地通过我们尚未发现的隐式通道（例如，定时侧通道）被回避。鉴于使用相同有效载荷在不同平台上启动马尔多克攻击的困难，攻击者能够做的是首先通过显式或隐式通道检测maldoc运行在哪个平台，然后利用平台特定的有效载荷发起攻击。

	In particular, the Adobe JavaScript API contains publicly accessible functions and object fields that could return different values when executed on different platforms. For example, app.platform returns WIN and MAC on respective platforms. Doc.path returns file path to the 

	特别是，Adobe JavaScript API包含可公开访问的函数和对象字段，可以在不同平台上执行时返回不同的值。例如，app.platform在各自的平台上返回WIN和MAC。 Doc.path返回文件路径

	3.6 Platform-agnostic Exploitation 

	3.6平台不可知的利用

	We also identified several techniques that can help “neutralize” the uncertainties caused by platform diversity, including but not limited to heap feng-shui, heap spray, and polyglot shellcode. Heap feng-shui. By making consecutive heap allocations and de-allocations of carefully selected sizes, an attacker can systematically manipulate the layout of the heap and predict the address of the next allocation or 

	我们还确定了一些可以帮助“中和”由平台多样性引起的不确定性的技术，包括但不限于堆风水，堆喷和多边形shellcode。堆风水。通过连续的堆分配和精心挑选的大小的解除分配，攻击者可以系统地操作堆的布局和预测下一个分配的地址或

	USENIX Association 

	USENIX协会

	26th USENIX Security Symposium    277 de-allocation [51]. This increases the chance of obtaining access to critical data such as vtables even without knowing every detail of the system memory allocator. Heap spray and NOP sled. By repeatedly allocating the attack payload and NOP sled in heap [13], an attacker is alleviated from using precise memory locations for control-flow hijacking; instead, an attacker only needs to ensure that control-flow is redirected to the sprayed area. Ployglot shellcode trampoline. Although not seen in the wild, it is possible to construct OS-agnostic shellcode in a similar manner as CPU architecture-agnostic shellcode [17, 64]. The key idea is to find operations that are meaningful in one platform and NOP on the other and use these operations to jump to different code for platform-specific activities. 

	第26届USENIX安全研讨会277取消分配[51]。即使不知道系统内存分配器的每个细节，这也增加了访问关键数据（如vtables）的机会。堆喷和NOP雪橇。通过在堆中重复分配攻击有效载荷和NOP底座[13]，攻击者从使用精确的存储位置缓解控制流劫持;相反，攻击者只需要确保控制流程被重定向到喷射区域。 Ployglot shellcode蹦床。虽然在野外看不到，但是可以用与CPU体系结构无关的shellcode [17,64]类似的方式来构造操作系统不可知的shellcode。关键的想法是在一个平台上找到有意义的操作，在另一个平台上找到有意义的操作，并使用这些操作跳转到不同的平台特定活动的代码。

	Although these operations can succeed on both platforms, attacks using these techniques can still be detected by platform diversity. This is because these operations have to be paired with other procedures to complete an end-to-end attack. For example, heap manipulation can succeed but the resulting memory layout might not be suitable for both platforms to land the critical data in attacker-controlled memory because of the discrepancies in heap management, while ployglot shellcode trampolines can run without crashing AAR, but the attack can still be detected by the malicious activities performed. 4 The PLATPAL Approach 

	尽管这些操作在两个平台上都能成功，但使用这些技术的攻击仍然可以通过平台多样性来检测。这是因为这些操作必须与其他程序配对才能完成端到端的攻击。例如，堆操作可以成功，但是由于堆管理的差异，堆结构的内存布局可能不适合这两种平台将关键数据放在攻击者控制的内存中，而ployglot shellcode蹦床可以在不使AAR崩溃的情况下运行，仍然可以被执行的恶意活动检测到。 4 PLATPAL方法

	This section presents the challenges and their solutions in designing P LATPA L that harvests platform diversity for maldoc detection. 4.1 Dual-level Tracing 

	本节介绍了在设计P LATPA L方面的挑战和解决方案，该方法为Maldoc检测获得平台多样性。 4.1双层追踪

	Although the platform diversity heuristic sounds intuitive, two natural questions arise: 1) What “behaviors” could be potentially different across different platforms? and 2) How can they be universally traced and compared? 

	虽然平台多样性的启发式听起来很直观，但是还是会出现两个自然的问题：1）不同平台之间的“行为”可能会有什么不同？ 2）他们如何被普遍追踪和比较？

	To answer the first question, “behaviors” must satisfy two requirements: 1) they are available and do not change across platforms and 2) they are the same for benign documents and could be different for maldocs. To this end, we identified two sets of “behaviors” that match these requirements: AAR’s internal PDF processing functions 

	为了回答第一个问题，“行为”必须满足两个要求：1）它们是可用的，不跨平台变化; 2）对于良性文件，它们是一样的，对于多元文化可能不同。为此，我们确定了两套符合这些要求的“行为”：AAR的内部PDF处理功能

	(internal behaviors) and external impact on the host system while executing the document (external behaviors). 

	（内部行为）和执行文档时外部对主机系统的影响（外部行为）。

	For internal behaviors, in AAR, PDF documents pass through the PDF processing functions in a deterministic order and trigger pre-defined callbacks sequentially. For example, a callback is issued when an object is resembled or rendered. When comparing execution across platforms, for a benign document, both function execution order and results are the same because of the cross-platform support of AAR, while for a maldoc, the execution trace could be different at many places, depending on how the attack is carried out. 

	对于内部行为，在AAR中，PDF文档按确定的顺序通过PDF处理函数，并按顺序触发预定义的回调。例如，当对象被类似或呈现时发出回调。当比较跨平台的执行时，对于良性文档，由于AAR的跨平台支持，函数执行顺序和结果是相同的，而对于maldoc，执行跟踪在许多地方可能不同，取决于攻击的方式完成了。

	In terms of external behaviors, because of the crossplatform nature of PDF specifications, if some legitimate actions impact the host system in one platform, it is expected that the same actions will be shown when opening the document on the other platform. For example, if a benign document connects to a remote host (e.g., for content downloading or form submission), the same behavior is expected on other platforms. However, if the Internet connection is triggered only upon successful exploitation, it will not be shown on the failing platform. 

	在外部行为方面，由于PDF规范的跨平台性，如果一些合法的行为在一个平台上影响到主机系统，预计在另一个平台上打开文档时会显示同样的行为。例如，如果良性文档连接到远程主机（例如，用于内容下载或表单提交），则在其他平台上期望相同的行为。但是，如果互联网连接仅在成功利用后触发，则不会在失败的平台上显示。

	The architecture of P LATPA L is described in Figure 3. 

	P LATPA L的架构如图3所示。

	P LATPA L traces both internal and external behaviors, and we argue that tracing both types of behaviors is necessary. Tracing external behaviors is crucial to catch the behavioral discrepancy after a successful exploitation, i.e., the malicious activity step in Figure 1. For example, after a successful JavaScript hidden API attack [22], the attacker might want to execute shellcode, which will fail on Mac because of discrepancies in syscall semantics. 

	P LATPA L追踪内部和外部行为，我们认为追踪这两种行为是必要的。追踪外部行为对于捕捉成功利用后的行为差异（例如，图1中的恶意活动步骤）至关重要。例如，在成功的JavaScript隐藏API攻击[22]之后，攻击者可能想要执行shellcode在Mac上，因为在系统调用语义的差异。

	The internal behaviors, however, all show the same thing: execution of JavaScript code stops at the same place. 

	但是，内部行为都显示相同的事情：JavaScript代码的执行停在相同的地方。

	The most compelling reason to have an internal behavior tracer is to defeat platform probing attempts, without which P LATPA L can be easily evaded by launching platform-aware attacks, as described in §3.5. Another reason to trace internal behaviors is to provide some insights on which AAR component is exploited or where the attack occurs, which helps the analysis of maldoc samples, especially for proof-of-concept (PoC) samples that simply crash AAR without any external activities. 4.2 

	具有内部行为跟踪器的最有说服力的理由是击败平台探测尝试，没有这一点，P LATPA L可以通过发起平台感知攻击轻松逃避，如§3.5所述。追踪内部行为的另一个原因是提供一些有关哪些AAR组件被利用或发生攻击的信息，这有助于对maldoc样本进行分析，尤其是概念验证（PoC）样本，这些样本只是在没有任何外部活动的情况下使AAR崩溃。 4.2

	Internal PDF Processing 

	内部PDF处理

	P LATPA L’s internal behavior tracer closely follows how AAR processes PDF documents. PDF processing inside AAR can be divided into two stages. 

	P LATPA L的内部行为追踪器密切关注AAR如何处理PDF文档。 AAR内部的PDF处理可以分为两个阶段。

	In the parsing stage, the underlying document is opened and the header is scanned to quickly locate the trailer and cross reference table (XRT). Upon locating the XRT, basic elements of the PDF document, called COS objects, are enumerated and parsed. Note that COS objects are only data with a type label (e.g., integer, string, keyword, array, dictionary, or stream). One or more COS objects are then assembled into PDF-specific components such as text, image, font, form, page, JavaScript code, etc. according to AAR’s interpretation of PDF specifications. 

	在解析阶段，打开底层文档并扫描标题以快速定位预告片和交叉引用表（XRT）。在找到XRT之后，枚举和分析称为COS对象的PDF文档的基本元素。请注意，COS对象只是具有类型标签的数据（例如，整型，字符串，关键字，数组，字典或流）。然后根据AAR对PDF规范的解释，将一个或多个COS对象组合成PDF特定的组件，如文本，图像，字体，表单，页面，JavaScript代码等。

	The hierarchical structure (e.g., which texts appear in a particular page) of the PDF document is also constructed along this process. The output, called PD tree, is then passed to the rendering engine for display. 

	PDF文档的分层结构（例如，哪些文本出现在特定页面中）也是沿着这个过程构建的。输出，称为PD树，然后传递给渲染引擎进行显示。

	278    26th USENIX Security Symposium 

	278第二十六届USENIX安全研讨会

	USENIX Association Figure 3: P LATPA L architecture. The suspicious file is submitted to two VMs with different platforms. During execution, both internal and external behaviors are traced and compared. Divergence in any behavior is considered a malicious signal. 

	USENIX协会图3：P LATPA L架构。将可疑文件提交给两台具有不同平台的虚拟机。在执行过程中，内部和外部行为都被追踪和比较。任何行为的分歧都被视为恶意信号。

	The drawing stage starts by performing OpenActions specified by the document, if any. Almost all maldocs will register anything that could trigger their malicious payload in OpenActions for immediate exploitation upon document open. Subsequent drawing activities depend on user’s inputs, such as scrolling down to the next page triggers the rendering of that page. Therefore, in this stage, P LATPA L not only hooks the functions but also actively drives the document rendering component by component. Note that displaying content to screen is a platform-dependent procedure and hence, will not be hooked by P LATPA L, but the callbacks (e.g., an object is rendered) are platform-independent and will be traced. 

	如果有的话，绘图阶段首先执行由文档指定的OpenAction。几乎所有的maldocs都会注册任何可能在OpenAction中触发其恶意负载的东西，以便在文档打开时立即利用。随后的绘画活动取决于用户的输入，例如向下滚动到下一页触发该页的呈现。因此，在这个阶段，P LATPA L不仅钩住了功能，而且还主动地驱动文件渲染组件。请注意，将内容显示到屏幕是一个依赖于平台的过程，因此，不会被P LATPA L挂钩，但是回调（例如，呈现对象）是平台无关的并且将被跟踪。

	In addition, for AAR, when the rendering engine performs a JavaScript action or draws a JavaScript-embedded form, the whole block of JavaScript code is executed. However, this also enables the platform detection attempts described in §3.5 and an easy escape of P LATPA L’s detection. To avoid this, P LATPA L is designed to suppress the automatic block execution of JavaScript code. Instead, the code is tokenized to a series of statements that are executed one by one, and the results from each execution are recorded and subsequently compared. If the statement calls a user-defined function, that function is also executed step-wise. 

	另外，对于AAR，当呈现引擎执行JavaScript动作或者绘制JavaScript嵌入形式时，将执行整个JavaScript代码块。但是，这也可以实现§3.5中描述的平台检测尝试，并且可以轻松逃脱P LATPA L的检测。为了避免这种情况，P LATPA L旨在抑制JavaScript代码的自动块执行。相反，代码被标记为一系列逐个执行的语句，并记录每个执行的结果并随后进行比较。如果语句调用用户定义的函数，那么该函数也是逐步执行的。

	Following is a summary of recorded traces at each step: 

	以下是在每个步骤记录的痕迹的总结：

	P LATPA L outputs the parsing results of COS objects (both type and content). PD tree construction: P LATPA L outputs every PD component with type and hierarchical position in the PD tree. 

	P LATPA L输出COS对象（类型和内容）的解析结果。 PD树构造：P LATPA L在PD树中输出具有类型和分层位置的每个PD组件。

	P LATPA L outputs every executed statement and the corresponding result. Other actions: P LATPA L outputs every callback triggered during the execution of this action, such as change of page views or visited URLs. Element rendering: P LATPA L outputs every callback triggered during the rendering of the PDF element. COS object parsing: Script execution: 

	P LATPA L输出每个执行的语句和相应的结果。其他操作：P LATPA L输出执行此操作期间触发的每个回调，例如更改页面查看或访问的URL。元素渲染：P LATPA L输出在渲染PDF元素期间触发的每个回调。 COS对象解析：脚本执行：

	4.3 External System Impact 

	4.3外部系统影响

	As syscalls are the main mechanisms for a program to interact with the host platform, P LATPA L hooks syscalls and records both arguments and return values in order to capture the impact of executing a maldoc on the host system. However, for P LATPA L, a unique problem arises when comparing syscalls across platforms, as the syscall semantics on Windows and Mac are drastically different. 

	由于系统调用是程序与主机平台交互的主要机制，因此P LATPA L会挂接系统调用并记录参数和返回值，以便捕获在主机系统上执行maldoc的影响。但是，对于P LATPA L，在比较跨平台的系统调用时会出现一个独特的问题，因为Windows和Mac上的系统调用语义是截然不同的。

	To ease the comparison of external behaviors across platforms, P LATPA L abstracts the high-level activities from the raw syscall dumps. In particular, P LATPA L is interested in three categories of activities: including files opened/created during the execution of the document, as well as file deletions, renames, linkings, etc. Network activities: including domain, IP address, and port of the remote socket. Filesystem operations: External executable launches: including execution of any programs after opening the document. 

	为了简化跨平台的外部行为比较，P LATPA L从原始系统调用转储中提取高级活动。尤其是P LATPA L对三类活动感兴趣：包括文档执行过程中打开/创建的文件，以及文件删除，重命名，链接等。网络活动：包括域名，IP地址和端口遥控插座。文件系统操作：外部可执行文件启动：包括在打开文档后执行任何程序。

	Besides behaviors constructed from syscall trace, P LATPA L additionally monitors whether AAR exits gracefully or crashes during the opening of the document. We 

	除了从系统调用跟踪构建的行为外，P LATPA L还会监视AAR是否正常退出或在文档打开时崩溃。我们

	(empirically) believe that many typical malware activities such as stealing information, C&C, dropping backdoors, etc, can be captured in these high-level behavior abstractions. This practice also aligns with many automated malware analysis tools like Cuckoo [44] and CWSandbox [63], which also automatically generate a summary that sorts and organizes the behaviors of malware into a few categories. However, unlike these dynamic malware analysis tools that infer maliciousness of the sample based on the sequence or hierarchy of these activities, the only indication of maliciousness for P LATPA L is that the set of captured activities differs across platforms. Another difference is that the summary generated by Cuckoo and CWSandbox usually requires manual interpretation to 

	（经验）认为，这些高级行为抽象中可以捕获到许多典型的恶意软件活动，如窃取信息，C＆C，后门程序等。这种做法也与许多自动化的恶意软件分析工具（如Cuckoo和CWSandbox [63]）一致，后者也自动生成一个摘要，将恶意软件的行为分为几类。但是，与这些基于这些活动的顺序或层级来推断样本恶意的动态恶意软件分析工具不同，P LATPA L的唯一恶意指示是捕获的活动集在不同的平台上是不同的。另一个不同之处在于，由Cuckoo和CWSandbox生成的摘要通常需要手动解释

	USENIX Association 

	USENIX协会

	26th USENIX Security Symposium    279 judge maliciousness, while the summary from P LATPA L requires no human effort in comparing behaviors across platforms. 5 

	判断恶意，而来自P LATPA L的总结则不需要人工比较跨平台的行为。五

	Implementation P LATPA L consists of three components: 1) an internal behavior tracer in the form of AAR plugin; 2) an external behavior tracer in the form of syscall tracer; and 3) a sandboxed environment for dynamic document examination based on VMware. We prototype P LATPA L to work on recent Windows (versions 7, 8 and 10) and Mac (versions 

	实现P LATPA L由三部分组成：1）AAR插件形式的内部行为追踪器; 2）syscall示踪器形式的外部行为示踪器; 3）基于VMware的动态文档审查的沙箱环境。我们将P LATPA L原型设计为在最近的Windows（版本7,8和10）和Mac（版本）上工作

	Yosemite, El Capitan, and Sierra) platforms, and is compatible with all AAR versions from Adobe Reader X 10.0 to the latest version of Adobe Acrobat DC. 5.1 

	优胜美地，El Capitan和Sierra）平台，并兼容从Adobe Reader X 10.0到最新版本的Adobe Acrobat DC的所有AAR版本。 5.1

	Internal Behavior Tracer Given that AAR is closed-source software, it is not viable to hook AAR’s PDF processing functions through source code instrumentation. Initially, we used dynamic binary instrumentation tools (i.e., Intel Pin [32] and DynamoRio [7]) to hook the execution of AAR and examine function calls at runtime. However, such an approach has two significant drawbacks: 1) These tools introduce a 

	内部行为追踪器鉴于AAR是封闭源码软件，通过源代码工具来钩住AAR的PDF处理函数是不可行的。最初，我们使用动态二进制检测工具（即Intel Pin [32]和DynamoRio [7]）来挂钩AAR的执行，并在运行时检查函数调用。但是，这种方法有两个显着的缺点：1）这些工具引入了一个

	16-20 times slowdown, which is not tolerable for practical maldoc detection. For example, executing a two-page document could take up to five minutes, and sometimes is even halted by the system; 2) The PDF processing logic is hidden in over 15000 functions (latest version of AAR) with no name or symbol information. It is difficult if not impossible to identify the critical functions as well as to construct the whole cycle. 

	放慢16-20倍，这对于实际的麦克洛克检测是不可容忍的。例如，执行双页文档可能需要长达五分钟的时间，有时甚至会被系统暂停; 2）PDF处理逻辑隐藏在超过15000个功能（最新版本的AAR）中，没有名称或符号信息。即使不是不可能确定关键功能，也很难构建整个周期。

	To this end, P LATPA L chooses to develop an AAR plugin as the internal behavior tracer. The AAR plugin technology [3] is designed to extend AAR with more functionalities such as database interaction, online collaboration, etc. The compiled plugin takes the form of a loadable DLL on Windows and an app bundle on Mac, which is loaded by AAR upon initialization and has significant control over AAR at runtime. The AAR plugin provides a few nice features that suit P LATPA L’s needs: 1) Its cross-platform support abstracts the platform-specific operations to a higher level; 2) It uses the internal logic of AAR in PDF processing and summarizes the logic into 782 functions and callbacks (nicely categorized and labeled), which enables P LATPA L to both passively monitor the execution of these functions and actively drive the document, including executing JavaScript code and rendering elements; 3) It is stable across AAR versions 

	为此，P LATPA L选择开发一个AAR插件作为内部行为追踪器。 AAR插件技术[3]旨在扩展AAR的功能，如数据库交互，在线协作等。编译的插件采用Windows上的可加载DLL和Mac上的应用程序包，由AAR加载初始化并在运行时对AAR进行有效的控制。 AAR插件提供了一些适合P LATPA L需求的很好的功能：1）它的跨平台支持将平台特定的操作抽象到更高的层次; 2）在PDF处理中使用AAR的内部逻辑，将逻辑汇总成782个函数和回调（很好的分类和标记），使得P LATPA L能够被动监控这些函数的执行并主动驱动文档，包括执行JavaScript代码和渲染元素; 3）在AAR版本中是稳定的

	(only two functions are added since version 10, which are not used by P LATPA L); 4) Since the AAR plugin is in the form of a loadable module, it shortens the total document analysis time to an average of 24 seconds. 

	（从版本10开始只添加了两个函数，这些函数不被P LATPA L使用）; 4）由于AAR插件是可加载模块的形式，因此它将总文档分析时间缩短为平均24秒。

	In recording behaviors discussed in §4.2, the COS objects and PD hierarchical information are extracted using the enumeration methods provided by the CosDoc, PDDoc, and PDF_Consultant classes. JavaScript code is first tokenized by a lexer adapted from 

	在§4.2中讨论的记录行为中，使用CosDoc，PDDoc和PDF_Consultant类提供的枚举方法提取COS对象和PD分层信息。 JavaScript代码首先由词法分析器进行标记

	SpiderMonkey and executed statement-by-statement with 

	SpiderMonkey和执行语句的声明

	AFExecuteThisScript method from AcroForm class. The rest of the PDF-supported actions are launched with the 

	从AcroForm类的AFExecuteThisScript方法。其余的PDF支持的动作是与

	AVDocPerformAction method. The PDF processing functions exposed to the AAR plugin can be hooked by the simple JMP-Trampoline hot-patching technique as summarized in [6]. 5.2 External Behavior Tracer 

	AVDocPerformAction方法。 AAR插件中的PDF处理函数可以通过简单的JMP-Trampoline热补丁技术挂钩，如[6]中所述。 5.2外部行为示踪

	As illustrated in §4.3, P LATPA L’s external behavior tracer records syscall arguments and return values during document execution. On Windows, the tracer is implemented based on NtTrace [41]; on Mac, the tracer is a Dscript utilizing the DTrace [9] mechanism available on BSD systems. Both techniques are mature on respective platforms and incur small execution overhead: 15% to 35% compared to launching AAR without the tracer attached, which helps to control the total execution time per document. Constructing the high-level behaviors is performed in a similar manner as Cuckoo guest agent [44]. 

	如第4.3节所述，P LATPA L的外部行为跟踪器在文档执行期间记录系统调用参数和返回值。在Windows上，跟踪器是基于NtTrace [41]实现的;在Mac上，示踪剂是利用BSD系统上可用的DTrace [9]机制的Dscript。这两种技术在各自的平台上都是成熟的，并且执行开销很小：与启动不带追踪器的AAR相比，15％到35％，这有助于控制每个文档的总执行时间。构建高层次的行为与Cuckoo客座[44]类似。

	In P LATPA L, syscall tracing starts only after the document is opened by AAR. The AAR initialization process is not traced (as AAR itself is not a malware) and P LATPA L is free of the messy filesystem activities (e.g., loading libraries, initializing directory structures, etc) during the start-up, leaving the execution trace in a very short and clean state. In fact, a benign document typically has around 20 entries of filesystem traces and no network activities or external program launches. AAR uses a single thread for loading and parsing the document and spawns one helper thread during document rendering. Syscalls of both threads are traced and compared. 

	在P LATPA L中，系统调用追踪只有在AAR打开文档后才会启动。 AAR初始化过程没有被跟踪（因为AAR本身不是恶意软件）并且P LATPA L在启动过程中没有混乱的文件系统活动（例如，加载库，初始化目录结构等），留下执行跟踪一个非常短暂和干净的状态。实际上，良性文件通常有大约20个文件系统跟踪条目，没有网络活动或外部程序启动。 AAR使用单个线程来加载和解析文档，并在文档呈现期间生成一个助手线程。两个线程的系统调用都被跟踪和比较。

	To compare file paths, P LATPA L further aggregates and labels filesystem operation traces into a few categories that have mappings on both platforms, including AAR program logic, AAR support file, AAR working caches, system library/framework dependencies, system fonts, and temporary files. Files outside these labels will go to the unknown category and will be compared based on filenames. 5.3 Automated Execution Sandbox For P LATPA L, the purpose of having an automated execution sandbox is twofold: 1) to confine the malicious activities within a proper boundary and 2) to provide a clean execution environment for each document examination that is free from side effects by prior executions. 

	为了比较文件路径，P LATPA L进一步聚集并标记文件系统操作跟踪到几个在两个平台上都有映射的类别，包括AAR程序逻辑，AAR支持文件，AAR工作缓存，系统库/框架依赖关系，系统字体和临时文件。这些标签以外的文件将转到未知类别，并将根据文件名进行比较。 5.3自动化执行沙盒对于LATPA L，拥有自动执行沙箱的目的有两个：1）将恶意活动限制在适当的边界内; 2）为每个没有副作用的文档检查提供干净的执行环境通过事先处决。

	280    26th USENIX Security Symposium 

	280第26届USENIX安全研讨会

	USENIX Association 

	USENIX协会

	The virtual machine (VM) is initialized with a clean-slate operating system and subsequently provisioned with the necessary tools and settings, including AAR, the plugin, and the syscall tracer. The memory and disk snapshot is taken after the provision, and each subsequent document execution restores the states from this snapshot. P LATPA L uses VMware for the management of VMs and snapshots. 

	使用clean-slate操作系统初始化虚拟机（VM），并随后调配必要的工具和设置，包括AAR，插件和系统调用示踪程序。内存和磁盘快照在提供之后进行，每个后续文档执行都会从此快照中恢复状态。 P LATPA L使用VMware来管理虚拟机和快照。

	P LATPA L can be started like 

	P LATPA L可以开始像

	Workflow. PlatPal <file-to-check>. After that, P LATPA L populates a Windows VM and a Mac VM and restores the memory and disk snapshots. The suspicious document is then uploaded to these VMs and AAR is started with the syscall tracer attached. After AAR is done with initialization, the control is transferred to the plugin (internal tracer), which opens the document for examination. After the examination finishes (or AAR crashes), logs from internal and external tracing are pulled from the respective VMs and compared on the host. P LATPA L reports whether discrepancies are detected among these logs. 6 Evaluation In this section, we validate the fundamental assumption of P LATPA L: benign documents behave the same when opened across different platforms, while maldocs behave differently when doing exploitation on different platforms. 

	流程。 PlatPal <文件检查>。之后，P LATPA L填充Windows VM和Mac VM，并恢复内存和磁盘快照。然后将可疑文档上传到这些虚拟机，并且AAR以附加的系统调用跟踪器启动。 AAR完成初始化后，控制权被转移到插件（内部追踪器），打开文档进行检查。考试结束后（或AAR崩溃），内部和外部追踪的记录将从相应的虚拟机中提取出来，并在主机上进行比较。 P LATPA L报告这些日志中是否检测到差异。 6评估在本节中，我们验证了P LATPA L的基本假设：良性文档在跨不同平台打开时表现相同，而在不同平台上进行开发时，maldoc表现出不同的表现。

	We also evaluate P LATPA L’s performance in terms of total time taken to finish a complete analysis. Experiment setup. The experiments were conducted on a MacBook Pro (2016 model) with Intel Core i7 2.9GHz CPU and 16GB RAM running macOS Sierra. One VM is provisioned with Windows 7 Professional SP1 and the other VM is provisioned with OSX Yosemite 10.10.1. Each VM is further provisioned with 6 different versions of AAR instances1 listed in Table 2. Each document sample is forced to be closed after one minute execution. 6.1 Benign Samples 

	我们还根据完成分析所花费的总时间评估P LATPA L的表现。实验设置。实验在MacBook Pro（2016款）上进行，搭载Intel酷睿i7 2.9GHz CPU和16GB RAM，运行macOS Sierra。一个VM配置了Windows 7 Professional SP1，另一个VM配置了OSX Yosemite 10.10.1。每个虚拟机进一步配置了6个不同版本的AAR实例1，如表2所列。每个文档样本在执行一分钟后被强制关闭。 6.1良性样品

	The benign sample set consists of three parts: 1000 samples are collected by searching Google with file type PDF and no keywords. However, a majority of these samples do not use features that are typically exploited by maldocs. For example, only 28 files contain embedded fonts and 6 files contain JavaScript code. Therefore, we further collected 30 samples from PDF learning sites2 that use advanced features in the PDF standard, including embedded JavaScript (26 samples), AcroForm (17), self-defined font (6), and 3D objects (2). All of the samples are submitted 

	良性样本集由三部分组成：1000个样本是通过在Google上搜索文件类型PDF并且没有关键字来收集的。但是，大多数这些样本不使用通常由maldocs利用的功能。例如，只有28个文件包含嵌入的字体，6个文件包含JavaScript代码。因此，我们进一步收集了来自PDF学习网站2的30个使用PDF标准的高级功能的样本，包括嵌入式JavaScript（26个样本），AcroForm（17），自定义字体（6）和3D对象（2）。所有的样品都提交

	1 Previous versions of AAR can be obtained from ftp://ftp. adobe.com/pub/adobe/reader from http://www. pdfscripting.com and http://www.planetpdf.com/ are mainly obtained 

	1以前版本的AAR可以从ftp：// ftp获得。 adobe.com/pub/adobe/reader from http：// www。主要获得pdfscripting.com和http://www.planetpdf.com/

	2 The samples to VirusTotal and scanned by 48 AV products and none of them are flagged as malicious by any of the AV engine. 

	2将病毒样本传送到VirusTotal并由48个AV产品进行扫描，并且任何AV引擎都不会将其标记为恶意。

	The samples are submitted to P LATPA L for analysis. In particular, each document is opened by all six versions of AAR instances on both platforms. This is to empirically verify that all AAR reader instances do not introduce nondeterminism during the document executions. Pairwise behavior comparison is conducted per AAR version and no discrepancy is observed, for any AAR version tested. More importantly, the experiment results support the first part of P LATPA L’s assumption: benign documents behave the same across platforms. 6.2 Maldoc Detection 

	样本提交给P LATPA L进行分析。特别是，每个文档都在两个平台上由所有六个AAR实例版本打开。这是为了验证所有的AAR读者实例在文档执行过程中不引入不确定性。每个AAR版本进行成对行为比较，对于任何测试的AAR版本，没有观察到差异。更重要的是，实验结果支持P LATPA L假设的第一部分：良性文档在不同平台上表现相同。 6.2马尔多克检测

	The maldoc samples are all collected from VirusTotal. In particular, we collected samples with identified CVE numbers (i.e., the sample exploits a particular CVE) 3 as of Dec. 31, 2016. As a prototype, we restrict the scope by analyzing CVEs published after 2013 and further filter the samples that are obviously mislabeled (e.g., a 2011 sample exploiting a 2016 CVE) or of wrong types (e.g., a zip file or an image file) and obtained a 320-sample dataset. 

	maldoc样本全部从VirusTotal收集。具体而言，我们从2016年12月31日起采集了具有确定的CVE编号的样本（即样本利用特定的CVE）3.作为原型，我们通过分析2013年后发布的CVE来限制范围，并进一步过滤明显错误标记（例如，2011年的样本利用2016年CVE）或错误的类型（如zip文件或图像文件），并获得320样本数据集。

	The samples are submitted to P LATPA L for analysis. In addition, we select the AAR versions that are most popular based on the time when the CVE was published. In other words, each exploit is a zero-day attack to the 

	样本提交给P LATPA L进行分析。另外，我们根据CVE发布的时间选择最受欢迎的AAR版本。换句话说，每个漏洞攻击都是零日攻击

	AAR version tested. The per-CVE detection results are presented in Table 2 and the breakdown in terms of which behavior factor causes the discrepancy is listed in Table 3. Interpretation. For any sample submitted to P LATPA L, only three outcomes are possible: 

	AAR版本测试。每个CVE检测结果在表2中列出，表3中列出了哪些行为因素导致差异的细分。对于提交给LATPA L的任何样本，只有三个结果是可能的：

	1) Malicious: At least one behavioral discrepancy is observed, including the case in which AAR crashes on both platforms but the internal behavior is different, i.e., they crash at different PDF processing stages. 

	1）恶意：观察到至少一个行为差异，包括两个平台上的AAR崩溃但内部行为不同的情况，即它们在不同的PDF处理阶段崩溃。

	2) Suspicious: AAR crashes on both platforms but no difference is observed in internal behaviors. Given that a benign document has no reason to crash AAR, P LATPA L considers these samples as suspicious. 

	2）可疑：两个平台上的AAR崩溃，但内部行为没有差异。鉴于良性文件没有理由使AAR崩溃，P LATPA L认为这些样本是可疑的。

	3) Benign: No behavioral discrepancy can be observed and AAR exits gracefully on both platforms. Overall result. Out of 320 samples, P LATPA L detected 209 (65.3%) malicious samples, 34 (10.6%) suspicious samples, and 77 (24.1%) benign samples. Suspicious samples. Among the 34 suspicious samples, we are able to confirm that 16 are PoC samples, including 7 released on Exploit-DB [19], 3 in public blogs, and 6 inferred by their original filenames recorded by VirusTotal. 

	3）良性：没有行为差异可以观察到，并且AAR在两个平台上都优雅地退出。总体结果。在320个样本中，P LATPA L检测到209个（65.3％）恶意样本，34个（10.6％）可疑样本和77个（24.1％）良性样本。可疑的样品。在34个可疑样本中，我们能够确认16个是PoC样本，包括Exploit-DB [19]上发布的7个，公共博客中的3个，以及由VirusTotal记录的原始文件名推断的6个样本。

	These samples are likely obtained by fuzzing and upon 

	这些样本很可能是通过模糊的方式获得的

	3VirusTotal labels a sample with CVE number as long as one of the hosted AV products flag the sample with the CVE label. 

	只要其中一个托管的AV产品用CVE标签标记样本，3VirusTotal就会标记具有CVE编号的样本。

	USENIX Association 

	USENIX协会

	26th USENIX Security Symposium    281 

	第二十六届USENIX安全研讨会281

	AAR 

	AAR

	Version DC.16.45 DC.16.45 DC.10.60 DC.10.60 DC.10.60 DC.10.60 11.0.10 11.0.10 11.0.10 11.0.00 11.0.00 10.1.4 10.1.4 10.1.4 10.1.0 10.1.0 CVE 2016-6946 2016-4204 2016-4119 2016-1091 2016-1077 2016-1046 2015-5097 2015-2426 2015-0090 2014-0521 2014-0495 2013-3353 2013-3346 2013-2729 2013-0640 2013-0641 Total 

	版本DC.16.45 DC.16.45 DC.10.60 DC.10.60 DC.10.60 DC.10.60 11.0.10 11.0.10 11.0.10 11.0.00 11.0.00 10.1.4 10.1.4 10.1.4 10.1.0 10.1.0 CVE 2016-6946 2016-4204 2016-4119 2016-1091 2016-1077 2016-1046 2015-5097 2015-2426 2015-0090 2014-0521 2014-0495 2013-3353 2013-3346 2013-2729 2013-0640 2013-0641

	Num. 

	A.

	Samples 

	样品

	Result 

	结果

	Both crash 

	这两个崩溃

	Divergence 51 78 

	发散51 78

	1 

	1

	63 1 4 4 

	63 1 4 4

	14 1 2 2 

	14 1 2 2

	16 

	16

	7 23 30 23 8 7 0 6 0 0 0 6 0 0 0 4 0 3 0 0 40 37 

	7 23 30 23 8 7 0 6 0 0 0 6 0 0 0 4 0 3 0 0 40 37

	1 

	1

	31 1 4 4 8 1 2 2 

	31 1 4 4 8 1 2 2

	10 

	10

	7 19 22 20 

	7 19 22 20

	320 

	320

	34 

	34

	209 

	209

	Table 2: P LATPA L maldoc detection results grouped by CVE number. Both crash means AAR crashes on both platforms while executing the maldoc sample with no divergence on internal behaviors; Divergence means at least one behavioral discrepancy (either internal or external) is observed. execution, will simply crash AAR. We expect it to apply to the rest of the suspicious samples as well. Benign samples. We identified several reasons for the failed detection of these samples. 

	表2：P LATPA L maldoc检测结果按CVE编号分组。两次崩溃都意味着AAR在执行maldoc样本时在两个平台上崩溃，内部行为没有分歧;分歧意味着至少有一个行为差异（内部或外部）被观察到。执行，只会使AAR崩溃。我们预计它也适用于其他可疑样本。良性样本。我们确定了这些样本检测失败的几个原因。

	1) The maldoc targets old and specific AAR versions. 

	1）maldoc的目标是老的和特定的AAR版本。

	Although a majority of maldoc samples exploit a wide range of AAR versions, we do find samples that target old AAR versions only, i.e., 9.X and 8.X, including 8 CVE-2013-0640 samples, 3 CVE-2013-0641 samples, and 1 CVE-2013-2729 sample. We also found that 13 CVE-2016-4204 samples and 10 CVE-2016-1091 samples seems to be exploiting AAR version 11.0.X and the exploits do not work on the AAR DC version used in the experiment. This is based on manual inspection of the 

	尽管大多数maldoc样本利用了广泛的AAR版本，但是我们确实只能找到仅针对旧的AAR版本的样本，即9.X和8.X，其中包括8个CVE-2013-0640样本，3个CVE-2013-0641样本和1个CVE-2013-2729样本。我们还发现，13个CVE-2016-4204样本和10个CVE-2016-1091样本似乎正在利用AAR 11.0.X版本，并且该漏洞在实验中使用的AAR DC版本上不起作用。这是基于人工检查的

	JavaScript dump from these samples. 

	这些示例的JavaScript转储。

	In total, they account for 36 out of the 77 samples classified as benign. This is also shows the drawback of P LATPA L, being a dynamic analysis approach, it requires proper setup of the execution environment to entice the malicious behaviors. 

	在77个归类为良性的样本中，总共有36个。这也是P LATPA L的一个缺点，作为一种动态分析方法，它需要对执行环境进行适当的设置以吸引恶意行为。

	2) The maldoc sample could be mis-classified by AV vendor on VirusTotal. This could be true for 11 CVE

	2）VirusTotal上的AV供应商可能会错误分类maldoc样本。对于11 CVE，这可能是正确的

	2016-4204 and 8 CVE-2016-1091 samples, as out of the 

	2016-4204和8个CVE-2016-1091样本，如下所示

	48 AV products hosted on VirusTotal, only one AV vendor flags them as malicious. In total, this accounts for 19 out of the 77 samples classified as benign. 

	在VirusTotal上托管的48个AV产品，只有一个AV供应商将其标记为恶意。总的来说，这在77个分类为良性的样本中占了19个。

	3) The maldoc does not perform malicious activity. Not all malicious activities in the maldoc can be triggered. In particular, we observed two CVE-2013-3353 samples attempted to connect to a C&C server in JavaScript but did nothing afterwards because of the lack of responses, which results in no divergences in execution trace. 

	3）maldoc不执行恶意活动。并非maldoc中的所有恶意活动都可以触发。具体来说，我们观察到两个CVE-2013-3353样本试图用JavaScript连接到C＆C服务器，但之后没有做任何事情，因为没有响应，导致执行轨迹没有分歧。

	In the end, for the rest of the samples classified as benign (20 in total), we are unable to confirm a reason why no behavioral discrepancies are observed. It could be because of any of the aforementioned reasons (but we are unable to confirm) and we do not preclude the possibility that some samples could evade P LATPA L’s detection. Given the scope and flexibility of PDF specification, it is possible that P LATPA L needs to hook more functions (e.g., per glyph to host encoding transformation performed a font) to capture finer-grained internal behaviors. Behavior effectiveness. Table 3 also shows the effectiveness of various behaviors in detecting maldocs. 

	最后，其余样本分为良性样本（共20个样本），我们无法确定没有观察到行为差异的原因。这可能是由于上述原因（但我们无法证实），我们并不排除有些样本可能会逃避P LATPA L的检测。鉴于PDF规范的范围和灵活性，P LATPA L可能需要钩住更多的函数（例如，每个字形来承载执行字体的编码转换）以捕获更细粒度的内部行为。行为有效性。表3还显示了各种行为检测maldocs的有效性。

	1) By the first row, it is possible to have only external behavior divergences, while internal behaviors are the same (e.g., due to pure JavaScript attacks). By the first column, it is also possible to have only internal behavior divergences, while external behaviors are the same (due to the powerful error-correction capability of AAR). 

	1）第一行可能只有外部行为差异，而内部行为是相同的（例如，由于纯粹的JavaScript攻击）。在第一列中，也可能只有内部的行为分歧，而外部行为是相同的（由于AAR强大的纠错能力）。

	2) Crash/no crash is the most effective external indicator, as memory-error exploitation is the dominating technique for maldoc attacks among the samples. JavaScript execution is the most effective internal indicator, as almost all attacks involve JavaScript; even memory error exploits use it to prepare the heap. Pinpointing attacks by internal tracer. One supplementary goal of the internal tracer is to provide insights on which AAR component is exploited or where the attack occurs given a maldoc sample. To evaluate how this goal is achieved, we performed a cross-check on where the internal behavior divergence occurs and the targeted AAR component of each CVE4 . The result is shown in Table 4. 

	2）崩溃/不崩溃是最有效的外部指标，因为内存错误利用是样本中maldoc攻击的主要技术。 JavaScript执行是最有效的内部指标，因为几乎所有的攻击都涉及JavaScript;甚至内存错误利用它来准备堆。通过内部追踪器查明攻击。内部跟踪器的一个补充目标是提供洞察哪个AAR组件被利用或攻击发生在给定的maldoc样本。为了评估这个目标是如何实现的，我们对内部行为发散的位置和每个CVE4的目标AAR组件进行了交叉检查。结果如表4所示。

	In four out of 7 cases, P LATPA L’s internal tracer finds divergence during the invocation of the vulnerable components. In the CVE-2015-2426 case, since the vulnerable component is a font library, the divergence is first detected during the rendering process. In the CVE-2013-3346 case, the vulnerable component (ToolButton callback) is triggered through JavaScript code and hence, the first divergence occurs in the script engine. In the CVE-2013-2729 case, although the bug is in the parser component, the divergence is detected when the maldoc is playing heap feng-shui to arrange heap objects. Resilience against automated maldoc generation. We test P LATPA L’s resilience against state-of-the-art maldoc generation tool, EvadeML [65], which automatically produce evasive maldoc variants against ML-depended approaches in Table 1 given a malicious seed file. To do this, we selected 30 samples out of the 209 malicious samples which are also detected as malicious by PDFrate [46], 

	在7个案例中，有4个案例中，P LATPA L的内部追踪者在调用弱势群体时发现了分歧。在CVE-2015-2426的情况下，由于易受攻击的组件是字体库，所以在渲染过程中首先检测到发散。在CVE-2013-3346的情况下，通过JavaScript代码触发易受攻击的组件（ToolButton回调），因此脚本引擎中会出现第一个分歧。在CVE-2013-2729的情况下，尽管bug在解析器组件中，但是当maldoc正在堆放风水来排列堆对象时，检测到发散。抵御自动化maldoc世代。我们使用先进的maldoc生成工具EvadeML [65]来测试P LATPA L的恢复能力，该工具会根据恶意的种子文件自动产生表1中ML依赖的方法的回避maldoc变种。为此，我们从209个恶意样本中选择了30个样本，这些样本也被PDFrate [46]检测为恶意样本，

	4Only CVEs which full details are publicly disclosed are considered 

	4仅考虑公开披露全部细节的CVE

	282    26th USENIX Security Symposium 

	282第二十六届USENIX安全研讨会

	USENIX Association Internal Behavior No difference COS object parsing PD tree construction JavaScript execution Other actions Element rendering Total 

	USENIX协会内部行为无差异COS对象解析PD树构造JavaScript执行其他动作元素渲染总数

	External Behavior 

	外部行为

	No difference 

	没有不同

	Both crash 

	这两个崩溃

	One crash 

	一次崩溃

	Filesystem 

	文件系统

	Network 

	网络

	Executable 

	可执行文件

	77 4 0 5 0 3 

	77 4 0 5 0 3

	89 

	89

	34 8 0 5 0 10 57 

	34 8 0 5 0 10 57

	0 

	0

	23 

	23

	2 

	2

	47 

	47

	0 

	0

	35 

	35

	107 6 0 4 

	107 6 0 4

	18 2 9 

	18 2 9

	39 3 0 2 

	39 3 0 2

	12 0 5 

	12 0 5

	22 0 0 0 4 2 0 6 

	22 0 0 0 4 2 0 6

	Total 

	总

	120 

	120

	35 

	35

	8 

	8

	91 

	91

	4 

	4

	62 

	62

	320 

	320

	Table 3: P LATPA L maldoc detection results grouped by the factor causing divergences. Note that for each sample, only one internal and one external factor is counted as the cause of divergence. E.g., if a sample crashes on Mac and does not crash on Windows, even their filesystem activities are different, it is counted in the crash/no crash category. The same rule applies to internal behaviors. 

	表3：P LATPA L maldoc检测结果按引起发散的因素分组。请注意，对于每个样本，只有一个内部因素和一个外部因素被视为发散的原因。例如，如果一个示例在Mac上崩溃，并且不在Windows上崩溃，即使它们的文件系统活动不同，它也会记录在崩溃/不崩溃类别中。同样的规则适用于内部行为。

	Detects 

	检测

	Item 

	项目

	Windows 

	视窗

	Mac 

	苹果电脑

	Ave. 9.7 0.5 

	大道9.7 0.5

	10.5 

	10.5

	7.3 

	7.3

	23.7 

	23.7

	Std. 1.1 0.2 

	标准1.1 0.2

	13.0 8.9 8.5 

	13.0 8.9 8.5

	Ave. 

	大道

	12.6 0.6 5.1 6.2 

	12.6 0.6 5.1 6.2

	22.1 

	22.1

	Std. 1.1 0.2 3.3 6.0 6.3 Snapshot restore Document parsing Script execution Element rendering Total CVE 2016-4119 2016-1077 2016-1046 2015-2426 2014-0521 2013-3346 2013-2729 

	标准。 1.1 0.2 3.3 6.0 6.3快照恢复文档解析脚本执行元素呈现总计CVE 2016-4119 2016-1077 2016-1046 2015-2426 2014-0521 2013-3346 2013-2729

	Targeted component Parser Parser 

	有针对性的组件解析器解析器

	Script engine 

	脚本引擎

	Library 

	图书馆

	Script engine 

	脚本引擎

	Render 

	给予

	Parser Divergence first occurs Parser Parser 

	解析器分歧首先发生解析器解析器

	Script engine 

	脚本引擎

	Render Script engine Script engine Script engine Vuln. component Vuln. component Vuln. component 

	渲染脚本引擎脚本引擎脚本引擎Vuln。组件Vuln。组件Vuln。零件

	Exploit carrier 

	利用载体

	Vuln. component Exploit carrier Exploit carrier 

	Vuln。组件利用漏洞利用载体

	Table 4: Divergence detected by P LATPA L’s internal tracer vs the actual buggy AAR component. the default PDF classifier that works with EvadeML5 . We then uses EvadeML to mutate these samples until all variants are considered benign. Finally, we send these evasive variants to P LATPA L for analysis and all of them are again marked as malicious, i.e., behavioral discrepancies are still observed. This experiment empirically verifies P LATPA L’s resilience on automated maldoc generation tools. The main reason for the resilience is that EvadeML mainly focuses on altering the structural feature of the maldoc while preserves its exploitation logic and also the internal and external behaviors when launching the attack. 6.3 Performance In P LATPA L, the total analysis time consists of two parts: 

	表4：由P LATPA L的内部跟踪仪检测到的偏差与实际的越野车AAR组件检测到的偏差。与EvadeML5一起使用的默认PDF分类器。然后，我们使用EvadeML来突变这些样本，直到所有变体被认为是良性的。最后，我们将这些回避式的变体发送给P LATPA L进行分析，并将其全部再次标记为恶意，即仍然观察到行为差异。这个实验验证了P LATPA L对自动化maldoc生成工具的适应能力。弹性化的主要原因是EvadeML主要关注于改变maldoc的结构特征，同时保留其开发逻辑以及发起攻击时的内部和外部行为。 6.3性能在P LATPA L中，总分析时间由两部分组成：

	1) time to restore disk and memory snapshots and 2) time to execute the document sample. The latter can be further broken down into document parsing, script execution, and element rendering time. Table 5 shows the time per item and the overall execution time. 

	1）恢复磁盘和内存快照的时间和2）执行文档样本的时间。后者可以进一步分解为文档解析，脚本执行和元素渲染时间。表5显示了每个项目的时间和整个执行时间。

	On average, document execution on both VMs can finish at approximately the same time (23.7 vs 22.1 seconds). Given that the VMs can run in parallel, a complete analysis can finish within 25 seconds. A notable difference 

	平均而言，两台虚拟机上的文件执行速度可以几乎同时完成（23.7 vs 22.1秒）。鉴于虚拟机可以并行运行，完整的分析可以在25秒内完成。一个显着的差异

	5 It is worthnoting that P LATPA L cannot be used as the PDF classifier for EvadeML as EvadeML requires a maliciousness score which has to be continuous between 0 and 1 while P LATPA L can only produce discrete scores of either 0 or 1. Therefore, we use PDFrate, the PDF classifier used in the EvadeML paper [65], for this experiment. Table 5: Breakdown of P LATPA L’s analysis time per document (unit: seconds). is that script execution on the Windows platform takes significantly longer than on the Mac platform. This is because almost all maldoc samples target Windows platforms and use JavaScript to launch the attack. The attack quickly fails on Mac (e.g., wrong address for ROP gadgets) and crashes AAR but succeeds on Windows and therefore takes longer to finish. The same reason also explains why the standard deviation on script execution time is larger on the Windows platform. 7 Discussion 7.1 Limitations User-interaction driven attacks. Although P LATPA L is capable of simulating simple users’ interactions (e.g., scrolling, button clicking, etc), P LATPA L does not attempt to explore all potential actions (e.g., key press, form filling, etc) or explore all branches of the JavaScript code. Similarly, P LATPA L cannot detect attacks that intentionally delay their execution (e.g., start exploitation two minutes after document open). These are common limitations for any dynamic analysis tool. However, we believe this is not a serious problem for maldoc detection, as hiding malicious activities after complex user interactions limits its effectiveness in compromising the victim’s system. Social engineering attacks. P LATPA L is not capable of detecting maldocs that aim to perform social engineering 

	5值得注意的是，P LATPA L不能用作EvadeML的PDF分类器，因为EvadeML要求恶意分数必须在0和1之间连续，而P LATPA L只能产生0或1的离散分数。因此，我们使用EvadeML论文[65]中使用的PDF分类器PDFrate，用于本实验。表5：每个文件的P LATPA L分析时间的分解（单位：秒）。在Windows平台上的脚本执行比在Mac平台上花费的时间要长得多。这是因为几乎所有的maldoc样本都是针对Windows平台的，并使用JavaScript来发起攻击。 Mac上的攻击很快就会失败（例如，ROP小工具的地址不正确），并使AAR崩溃，但在Windows上成功，因此需要花费更长时间才能完成。同样的原因也解释了为什么在Windows平台上脚本执行时间的标准偏差较大。 7讨论7.1限制用户交互驱动的攻击。尽管P LATPA L能够模拟简单用户的交互（例如滚动，按钮点击等），但LATPA L并不试图探索所有潜在的行为（例如按键，表单填写等），或探索所有的分支JavaScript代码。同样，P LATPA L也不能检测有意延迟执行的攻击（例如，在文档打开两分钟后开始利用）。这些是任何动态分析工具的常见限制。然而，我们认为这不是马尔多克检测的严重问题，因为在复杂的用户交互之后隐藏恶意活动限制了其牺牲受害者系统的有效性。社会工程攻击。 P LATPA L无法检测旨在执行社会工程的maldocs

	USENIX Association 

	USENIX协会

	26th USENIX Security Symposium    283 

	第二十六届USENIX安全研讨会283

	Targeted AAR version. attacks, such as faking password prompt with a JavaScript window or enticing the user to download a file and execute it. This is because these maldocs neither exploit bugs in 

	有针对性的AAR版本。攻击，如使用JavaScript窗口伪造密码提示或诱使用户下载文件并执行它。这是因为这些maldocs既不利用漏洞

	AAR nor inject malicious payload, (in fact they are legit documents structural-wise) and hence will have exactly the same behaviors on both platforms. 

	AAR也不会注入恶意负载（实际上它们是结构化的合法文档），因此在两个平台上的行为完全相同。

	If a maldoc targets a specific version of AAR, its behaviors in P LATPA L will likely be either crashing both AAR instances (i.e., exploited the bug but used the wrong payload), or the document is rendered and closed gracefully because of error correction by AAR. In the latter case, P LATPA L will not be able to detect a behavioral discrepancy. This is usually not a problem for P LATPA L in practice, as P LATPA L will mainly be used to detect maldocs against the latest version of AAR. However, P LATPA L can also have a document tested on many AAR versions and flag it as suspicious as long as a discrepancy is observed in any single version. 

	如果一个maldoc针对特定版本的AAR，那么它在P LATPA L中的行为可能会导致两个AAR实例崩溃（即利用错误但使用了错误的有效负载），或者文档由于错误纠正而被正常渲染和关闭AAR。在后一种情况下，P LATPA L将无法检测到行为差异。 P LATPA L在实践中通常不会成为问题，因为P LATPA L将主要用于检测最新版本的AAR中的maldoc。然而，P LATPA L也可以在许多AAR版本上测试一个文件，并且只要在任何单一版本中观察到差异就将其标记为可疑。

	Another potential problem for P LATPA L is that non-deterministic factors in document execution could cause false alerts. Examples include return value of gettime functions or random number generators available through JavaScript code. Although P LATPA L does not suffer from such a problem during the experiment, a complete solution would require a thorough examination of the PDF JavaScript specification and identify all non-determinism. These non-deterministic factors need to be recorded during the execution of a document on one platform and replayed on the other platform. Non-determinism. 7.2 Deployment 

	P LATPA L的另一个潜在问题是文档执行中的非确定性因素可能会导致错误警报。示例包括gettime函数的返回值或通过JavaScript代码提供的随机数生成器。虽然P LATPA L在实验过程中没有遇到这样的问题，但是一个完整的解决方案需要对PDF JavaScript规范进行彻底的检查，并确定所有的非确定性。这些非确定性因素需要在一个平台上执行文档时记录下来，并在另一个平台上重播。非确定性。 7.2部署

	As P LATPA L requires at least two VMs, a large amount of image and memory needs to be committed to support the operation of P LATPA L. Our current implementation uses 60GB disk space to host the snapshots for six versions of 

	由于P LATPA L需要至少两个虚拟机，因此需要大量的映像和内存来支持P LATPA L的操作。我们目前的实现使用60GB磁盘空间来托管六个版本的快照

	AAR and 2GB memory per each running VM. 

	AAR和每个运行VM的2GB内存。

	To this end, we believe that P LATPA L is best suited for cloud storage providers (e.g., Dropbox, Google Docs, Facebook, etc.) which can use P LATPA L to periodically scan for maldocs among existing files or new uploads. 

	为此，我们认为P LATPA L最适合于云存储提供商（例如Dropbox，Google Docs，Facebook等），它们可以使用P LATPA L定期扫描现有文件或新上传中的maldoc。

	These providers can afford the disk and memory required to set up VMs with diverse platforms as well as enjoy economy of scale. Similarly, P LATPA L also fits the model of online malware scanning services like VirusTotal or the cloud versions of anti-virus products. 

	这些提供商可以承担建立具有不同平台的虚拟机所需的磁盘和内存，并享受规模经济。同样，P LATPA L也适合VirusTotal等在线恶意软件扫描服务或防病毒产品的云版本。

	In addition, as a complementary scheme, P LATPA L can be easily integrated with previous works (Table 1) to improve their detection accuracy. In particular, P LATPA L’s internal behavior tracer can be used to replace parsers in these techniques to mitigate the parser-confusion attack [11]. COS object and PD tree information can be fed to metadata-based techniques [33, 36, 46, 52], while the 

	此外，作为补充方案，P LATPA L可以很容易地与之前的作品（表1）整合，以提高其检测精度。特别是P LATPA L的内部行为跟踪器可以用来替代这些技术中的解析器来缓解解析器混淆攻击[11]。 COS对象和PD树信息可以被馈送到基于元数据的技术[33,36,46,52]

	JavaScript code dump can be fed to JavaScript-oriented techniques [14, 27, 31, 45, 48, 58, 59] for analysis. 7.3 Future Works 

	JavaScript代码转储可以反馈给面向JavaScript的技术[14,27,31,45,48,58,59]进行分析。 7.3未来的作品

	We believe that P LATPA L is a flexible framework that is suitable not only for PDF-based maldoc detection but also for systematically approaching security-through-diversity. Support more document types. MS Office programs share many features with AAR products, such as 1) supporting both Windows and Mac platforms; 2) supporting a plugin architecture which allows efficient hooking of document processing functions and action driving; 3) executing documents based on a standard specification that consists of static components (e.g., text) and programmable components (e.g., macros). Therefore, we do not see fundamental difficulties in porting P LATPA L to support maldoc detection that targets MS Office suites. 

	我们相信，P LATPA L是一个灵活的框架，不仅适用于基于PDF的maldoc检测，而且适用于系统地处理安全性和多样性。支持更多的文档类型。 MS Office程序与AAR产品共享许多功能，例如1）支持Windows和Mac平台; 2）支持插件架构，允许有效地挂接文件处理功能和行动驾驶; 3）基于由静态组件（例如，文本）和可编程组件（例如，宏）组成的标准规范来执行文档。因此，我们并不认为移植P LATPA L支持针对MS Office套件的Maldoc检测存在根本性困难。

	As another example, given that websites can also be viewed as HTML documents with embedded JavaScript, malicious website detection also fits into P LATPA L’s framework. Furthermore, given that Chrome and Firefox browsers and their scripting engines are open-sourced, P LATPA L is capable of performing finer-grained behavior tracing and comparison with source code instrumentation. Explore architecture diversity. Apart from platform diversity, CPU architecture diversity can also be harvested for maldoc detection, which we expect to have a similar effect in stopping maldoc attacks. To verify this, we plan to extend P LATPA L to support the Android version of 

	再举一个例子，由于网站也可以被看作是嵌入式JavaScript的HTML文档，恶意网站检测也适用于P LATPA L的框架。此外，由于Chrome和Firefox浏览器及其脚本引擎是开源的，因此P LATPA L能够执行更细粒度的行为跟踪并与源代码工具进行比较。探索建筑多样性。除了平台多样性以外，CPU架构的多样性也可以用于maldoc检测，我们预计在阻止maldoc攻击方面也会有类似的效果。为了验证这一点，我们计划扩展P LATPA L以支持Android版本

	AAR, which has both ARM and x86 variants. 8 Additional Related Work In addition to the maldoc detection work, being an Nversion system, P LATPA L is also related to the N-version research. The concept of the N-version system was initially introduced as a software fault-tolerance technique [12] and was later applied to enhance system and software security. For example, Frost [60] instruments a program with complementary scheduling algorithms to survive concurrency errors; Crane et al. [16] applies dynamic control-flow diversity and noise injection to thwart cache side-channel attacks; Tightlip [68] and Capizzi et al. [10] randomize sensitive data in program variants to mitigate privacy leaks; Mx [24] uses multiple versions of the same program to survive update bugs; Cocktail [66] uses multiple web browser implementations to survive vendor-specific attacks; and Nvariant [15], Replicae [8], and GHUMVEE [61] run program variants in disjoint memory layouts to mitigate code reuse attacks. Similarly, Orchestra [43] synchronizes two program variants which grow the stack in opposite directions for intrusion detec

	AAR，同时拥有ARM和x86版本。 8其他相关工作除了maldoc检测工作，作为一个Nversion系统，P LATPA L还与N版本的研究有关。 N版本系统的概念最初是作为软件容错技术引入的[12]，后来被用于增强系统和软件的安全性。例如，Frost [60]用补充调度算法来处理并发错误; Crane等人[16]应用动态控制流分集和噪声注入来阻止高速缓存侧信道攻击; Tightlip [68]和Capizzi等。 [10]在程序变体中随机化敏感数据以减轻隐私泄漏; Mx [24]使用相同程序的多个版本来存活更新错误;鸡尾酒[66]使用多个网页浏览器实施，以生存供应商特定的攻击;和Nvariant [15]，Replicae [8]和GHUMVEE [61]在不相交的内存布局中运行程序变体，以减轻代码重用攻击。同样，Orchestra [43]同步两个程序变种，在入侵检测的反方向增长堆栈

	284    26th USENIX Security Symposium 

	284 USENIX安全研讨会

	USENIX Association tion. In particular, Smutz et al. [47] attempts to identify and prevent detection evasions by constructing diversified classifiers, ensembling them into a single system, and comparing their classification outputs with mutual agreement analysis. 

	USENIX协会重刑。特别是，Smutz等人[47]通过构建多元化的分类器，把它们整合到一个单一的系统中，并将它们的分类输出与相互协议分析进行比较，从而试图识别和防止检测规避。

	Although P LATPA L is designed for a completely different goal (i.e., maldoc detection), it shares the insights with N-version systems: an attacker is forced to simultaneously compromise all variants with the same input in order to take down or mislead the whole system. 

	虽然P LATPA L是为完全不同的目标而设计的（即Maldoc检测），但它与N版本系统分享了洞见：攻击者被迫同时以相同的输入折衷所有变体，以便取消或误导整个系统。

	Another line of related work is introducing diversity to the execution environment in order to entice and detect malicious behaviors. For example, HoneyClient [56], caches and resembles potentially malicious objects from the network stream (e.g., PDF files) and then send it to multiple emulated environments for analysis. Balzarotti et al. [4] detects “split personality” in malware, i.e., malware that shows diverging behaviors in emulated environment and bare-metal machines, by comparing the runtime behaviors across runs. Rozzle [26] uses symbolic execution to emulate different environment values malware typically checks and hence, entice environment-specific behaviors from the malware. to show diverging behaviors. 

	另一个相关的工作是向执行环境引入多样性，以吸引和检测恶意行为。例如，HoneyClient [56]从网络流中缓存和类似潜在的恶意对象（例如PDF文件），然后将其发送到多个模拟环境进行分析。 Balzarotti等人[4]通过比较跨运行时的运行时行为，检测恶意软件中的“分裂人格”，即在模拟环境和裸机中显示不同行为的恶意软件。 Rozzle [26]使用符号执行来模拟恶意软件通常会检查的不同环境值，因此可以从恶意软件中吸引特定于环境的行为。显示分歧的行为。

	P LATPA L shares the same belief as these works: diversified execution environment leads to diversified behaviors, and focuses on harvesting platform diversity for maldoc detection. 9 Conclusion Due to the continued exploitation of AAR, maldoc detection has become a pressing problem. A survey of existing techniques reveals that they are vulnerable to recent attacks such as parser-confusion and ML-evasion attacks. In response to this, we propose a new perspective: platform diversity, and prototype P LATPA L for maldoc detection. P LATPA L hooks into AAR to trace internal PDF processing and also uses full dynamic analysis to capture a maldoc’s external impact on the host system. Both internal and external traces are compared, and the only heuristic to detect maldoc is based on the observation that a benign document behaves the same across platforms, while a maldoc behaves differently during exploitation, because of the diversified implementations of syscalls, memory management, etc. across platforms. Such a heuristic does not require known maldoc samples to derive patterns that differentiate maldocs from benign documents, which also enables P LATPA L to detect zero-day attacks without prior knowledge of the attack. Evaluations show that P LATPA L raises no false alarms in benign samples, detects a variety of behavioral discrepancies in malicious samples, and is a scalable and practical solution. 

	P LATPA L与这些作品具有相同的信念：多元化的执行环境导致了多元化的行为，并侧重于收集平台多样性以进行麦克洛克检测。 9结论由于AAR的不断开发，Maldoc检测已经成为一个迫切的问题。对现有技术的调查显示，他们很容易受到最近的攻击，如解析器混淆和ML规避攻击。针对这一点，我们提出了一个新的观点：平台多样性，原型P LATPA L maldoc检测。 P LATPA L挂钩到AAR以跟踪内部PDF处理，并使用全面的动态分析来捕获maldoc对主机系统的外部影响。内部和外部的痕迹都进行了比较，唯一的启发式检测maldoc是基于这样一个观察：一个良性的文件在不同平台上表现相同，而maldoc在开发过程中表现不同，因为系统调用，内存管理等的多样化实现跨平台。这样的启发式算法不需要已知的maldoc样本来导出区分maldoc和良性文档的模式，这也使得LATPA L能够在事先不知道攻击的情况下检测到零日攻击。评估显示，P LATPA L在良性样本中不会产生误报，在恶意样本中检测到各种行为差异，是一种可扩展的实用解决方案。

	10 Acknowledgment 

	10致谢

	We thank our shepherd, Alexandros Kapravelos, and the anonymous reviewers for their helpful feedback. This research was supported by NSF under award DGE1500084, CNS-1563848, CRI-1629851, CNS-1017265, CNS-0831300, and CNS-1149051, ONR under grant N000140911042 and N000141512162, DHS under contract No. N66001-12-C-0133, United States Air Force under contract No. FA8650-10-C-7025, DARPA under contract No. DARPA FA8650-15-C-7556, and DARPA HR0011-16-C-0059, and ETRI under grant MSIP/IITP[B0101-15-0644]. References 

	我们感谢我们的牧羊人Alexandros Kapravelos和匿名审稿人的有益反馈。本研究得到美国国家科学基金会颁发的DGE1500084，CNS-1563848，CRI-1629851，CNS-1017265，CNS-0831300和CNS-1149051的支持，ONR授予N000140911042和N000141512162，DHS的合同号为N66001-12-C-0133美国空军根据合同号FA8650-10-C-7025，DARPA根据合同号DARPA FA8650-15-C-7556和DARPA HR0011-16-C-0059以及ETRI根据授权MSIP / IITP [B0101 -15-0644。参考

	[1] Adobe Systems Inc. Document Management - Portable document format, 2008. http://wwwimages.adobe.com/content/dam/ Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf. 

	[1] Adob​​e Systems Inc.文档管理 - 便携式文档格式，2008。http://wwwimages.adobe.com/content/dam/ Adob​​e / en / devnet / pdf / pdfs / PDF32000_2008.pdf。

	[2] Adobe Systems Inc. 

	[2] Adob​​e系统公司

	Mode, 2010. 

	模式，2010。

	Introducing Adobe Reader Protected http://blogs.adobe.com/security/2010/ 

	Adobe Reader简介受保护http://blogs.adobe.com/security/2010/

	07/introducing- adobe- reader- protected- mode.html. 

	07 / introduction-adobe-reader-protected-mode.html。

	[3] Adobe Systems Inc. 

	[3] Adob​​e系统公司

	Plug-ins and Applications, 2015. http://help.adobe.com/en_US/acrobat/acrobat_dc_ sdk/2015/HTMLHelp/#t=Acro12_MasterBook/Plugins_ Introduction/About_plug- ins.htm. 

	插件和应用程序，2015。http://help.adobe.com/en_US/acrobat/acrobat_dc_ sdk / 2015 / HTMLHelp /＃t = Acro12_MasterBook / Plugins_ Introduction / About_plug-ins.htm。

	[4] Davide Balzarotti, Marco Cova, Christoph Karlberger, Christopher Kruegel, Engin Kirda, and Giovann Vigna. Efficient Detection of Split Personalities in Malware. In Proceedings of the 17th Annual 

	[4]大卫巴扎罗蒂，马可·科瓦，克里斯托夫·卡尔伯格，克里斯托弗·克鲁格尔，恩金·科尔达和乔凡·维尼亚。恶意软件中分裂人物的有效检测。在第十七届年会会刊上

	Network and Distributed System Security Symposium (NDSS), San 

	网络和分布式系统安全研讨会（NDSS），San

	Diego, CA, February–March 2010. 

	加利福尼亚州迭戈，2010年2月至3月。

	[5] Tyler Bohan. In the Zone: OS X Heap Exploitation. In Proceedings of the 2016 Summercon, New Yark, NY, July 2016. 

	[5]泰勒Bohan。在区域：OS X堆开发。 2016年7月在纽约州纽约市举行的Summercon 2016会议论文集中。

	[6] Jurriaan Bremer. x86 API Hooking Demystified, 2012. https: 

	[6] Jurriaan Bremer。 x86 API Hooking Demystified，2012. https：

	//jbremer.org/x86- api- hooking- demystified/. 

	//jbremer.org/x86- api- hooking- demystified /。

	[7] Derek Bruening. Efficient, Transparent, and Comprehensive Runtime Code Manipulation. PhD thesis, MIT, 2004. 

	[7]德里克·布鲁宁。高效，透明，全面的运行时代码操作。博士论文，麻省理工学院，2004年。

	[8] Danilo Bruschi, Lorenzo Cavallaro, and Andrea Lanzi. Diversified Process Replica for Defeating Memory Error Exploits. In Proceedings of the 2007 International Performance, Computing, and 

	[8]达尼洛·布鲁斯基，洛伦佐·卡瓦拉罗和安德里亚·兰齐。用于击败内存错误漏洞的多元化进程副本。在2007年国际表演，计算机和计算机会议论文集中

	Communications Conference (IPCCC), New Orleans, LA, April 

	通信会议（IPCCC），洛杉矶新奥尔良，四月

	2007. 

	2007.

	[9] Bryan M. Cantrill, Michael W. Shapiro, and Adam H. Leventhal. Dynamic Instrumentation of Production Systems. In Proceedings of the 2004 USENIX Annual Technical Conference (ATC), Boston, MA, June–July 2004. 

	[9] Bryan M. Cantrill，Michael W. Shapiro和Adam H. Leventhal。生产系统的动态仪表。 2004年6月 -  7月在马萨诸塞州波士顿举行的2004年USENIX年度技术会议（ATC）会刊上。

	[10] Roberto Capizzi, Antonio Longo, V. N. Venkatakrishnan, and 

	[10]罗伯托·卡皮齐，安东尼奥·隆戈，V.N.Venkatakrishnan和

	A. Prasad Sistla. Preventing Information Leaks Through Shadow Executions. In Proceedings of the 2008 International Conference on Software Engineering (ICSE), Anaheim, CA, December 2008. 

	A. Prasad西斯拉。通过暗影执行防止信息泄漏。 2008年12月在加利福尼亚州阿纳海姆召开的2008年度软件工程国际会议论文集（ICSE）上。

	[11] Curtis Carmony, Mu Zhang, Xunchao Hu, Abhishek Vasisht Bhaskar, and Heng Yin. Extract Me If You Can: Abusing PDF Parsers in Malware Detectors. In Proceedings of the 2016 Annual 

	[11]柯蒂斯Carmony，穆章，胡寻超，Abhishek Vasisht Bhaskar和Heng Yin。如果可以，请提取我：滥用恶意软件检测器中的PDF解析器。在2016年年度会议记录

	Network and Distributed System Security Symposium (NDSS), San 

	网络和分布式系统安全研讨会（NDSS），San

	Diego, CA, February 2016. 

	加利福尼亚州迭戈，2016年2月。

	[12] Liming Chen and Algirdas Avizienis. N-Version Programming: A Fault-Tolerance Approach To Reliability of Software Operation. In Fault-Tolerant Computing, 1995, Jun. 1995. 

	[12]黎明陈和Algirdas Avizienis。 N版本编程：软件操作可靠性的容错方法。在容错计算，1995年6月，1995年。

	[13] Corelan Team. Exploit writing tutorial part 11 : Heap Spraying 

	Corelan团队。利用写作教程第11部分：堆喷洒

	Demystified, 2011. https://www.corelan.be/index.php/ 

	揭秘，2011年。https://www.corelan.be/index.php/

	USENIX Association 

	USENIX协会

	26th USENIX Security Symposium    285 2011/12/31/exploit- writing- tutorial- part- 11- heapspraying- demystified. 

	第26届USENIX安全研讨会285 2011/12/31 / exploit- writing-tutorial- part- 11-堆喷洞 - 揭秘。

	[14] Igino Corona, Davide Maiorca, Davide Ariu, and Giorgio Giacinto. Lux0R: Detection of Malicious PDF-embedded JavaScript Code through Discriminant Analysis of API References. In Proceedings of the Artificial Intelligent and Security Workshop (AISec), 2014. 

	[14] Igino Corona，Davide Maiorca，Davide Ariu和Giorgio Giacinto。 Lux0R：通过对API参考的判别分析来检测恶意的嵌入JavaScript的JavaScript代码。在2014年人工智能和安全研讨会（AISec）会议记录中。

	[15] Benjamin Cox, David Evans, Adrian Filipi, Jonathan Rowanhill, 

	[15]本杰明考克斯，大卫埃文斯，艾德里安菲利普，乔纳森Rowanhill，

	Wei Hu, Jack Davidson, John Knight, Anh Nguyen-Tuong, and Jason Hiser. N-Variant Systems: A Secretless Framework for Security through Diversity. In Proceedings of the 15th USENIX Security Symposium (Security), Vancouver, Canada, July 2006. 

	胡伟，杰克·戴维森，约翰·奈特，阮安东和杰森·希尔。多变的系统：通过多样性实现安全的秘密框架2006年7月在加拿大温哥华举行的第十五届USENIX安全研讨会（安全性）会议录。

	[16] Stephen Crane, Andrei Homescu, Stefan Brunthaler, Per Larsen, and Michael Franz. Thwarting Cache Side-Channel Attacks Through Dynamic Software Diversity. 

	[16]斯蒂芬·克兰，安德烈·霍伊斯库，斯特凡·布朗塔勒，佩尔·拉森和迈克尔·弗朗茨。通过动态软件分集阻止Cache Side-Channel攻击

	In Proceedings of the 

	在“诉讼程序”中

	2015 Annual Network and Distributed System Security Symposium 

	2015年度网络与分布式系统安全研讨会

	(NDSS), San Diego, CA, February 2015. 

	（NDSS），加利福尼亚州圣迭戈，2015年2月。

	[17] daehee87. DEFCON 2014 Polyglot Writeup, 2014. http:// daehee87.tistory.com/393. 

	[17] daehee87。 DEFCON 2014 Polyglot Writeup，2014。http：// daehee87.tistory.com/393。

	ECMAScript Language Specifi

	ECMAScript语言规范

	[18] ECMA International. cation, 2016. http://www.ecma- international.org/ publications/files/ECMA- ST/Ecma- 262.pdf. 

	[18] ECMA国际。阳离子，2016。http：//www.ecma-international.org/ publications / files / ECMA-ST / Ecma- 262.pdf。

	[19] Exploit Database. Offensive Securityâ ˘A ´Zs Exploit Database 

	[19]利用数据库。攻击性安全数据库

	Archive, 2016. https://www.exploit- db.com. 

	Archive，2016. https：//www.exploit-db.com。

	[20] Joseph Gardiner and Shishir Nagaraja. On the Security of Machine Learning in Malware C&C Detection: A Survey. ACM Computing Survey (CSUR), 49(3), September 2016. 

	[20]约瑟夫加德纳和Shishir Nagaraja。恶意软件C＆C检测中机器学习的安全性研究。 ACM Computing Survey（CSUR），49（3），2016年9月。

	[21] Dan Goodin. Pwn2Own Carnage Continues as Exploits Take Down Adobe Reader, Flash, 2013. https://arstechnica. com/security/2013/03/pwn2own- carnage- continuesas- exploits- take- down- adobe- reader- flash. 

	[21] Dan Goodin。 Pwn2Own大屠杀继续作为漏洞利用Adobe Reader，Flash，2013. https：// arstechnica。 com / security / 2013/03 / pwn2own-carnage-continueas-exploits-take-down-adobe-reader-flash。

	[22] Brian Gorenc, AbdulAziz Hariri, and Jasiel Spelman. Abusing Adobe Reader’s JavaScript APIs. In Proceedings of the 23rd DEF CON, Las Vegas, NV, August 2015. 

	[22] Brian Gorenc，AbdulAziz Hariri和Jasiel Spelman。滥用Adobe Reader的JavaScript API。在2015年8月在内华达州拉斯维加斯举行的第23届DEF CON会议论文集中。

	[23] Marco Grassi. 

	[23] Marco Grassi。

	[CVE-2016-4673] Apple CoreGraphics macOS/iOS 

	[CVE-2016-4673] Apple CoreGraphics macOS / iOS

	JPEG memory corruption, 

	JPEG内存损坏，

	2016. https://marcograss.github.io/security/apple/ cve/macos/ios/2016/11/21/cve- 2016- 4673- applecoregraphics.html. 

	https://marcograss.github.io/security/apple/ cve / macos / ios / 2016/11/21 / cve- 2016- 4673- applecoregraphics.html。

	[24] Petr Hosek and Cristian Cadar. Safe Software Updates via Multiversion Execution. In Proceedings of the 35th International Conference on Software Engineering (ICSE), San Francisco, CA, May 2013. 

	[24]彼得·霍斯克和克里斯蒂安·卡达尔。通过Multiversion执行安全的软件更新。在第35届国际软件工程会议（ICSE），加利福尼亚州旧金山，2013年5月。

	[25] Kaspersky. 

	[25]卡巴斯基。

	Security Bulletin, 

	安全公告，

	Kaspersky 

	卡巴斯基

	2015. https://securelist.com/files/2014/12/KasperskySecurity- Bulletin- 2014- EN.pdf. 

	https://securelist.com/files/2014/12/KasperskySecurity- Bulletin- 2014- EN.pdf。

	[26] Clemens Kolbitsch, Benjamin Livshits, Benjamin Zorn, and Christian Seifert. Rozzle: De-Cloaking Internet Malware. 

	Clemens Kolbitsch，Benjamin Livshits，Benjamin Zorn和Christian Seifert。 Rozzle：去欺骗互联网恶意软件。

	In Proceedings of the 33rd IEEE Symposium on Security and Privacy 

	在第33届IEEE安全与隐私专题讨论会论文集中

	(Oakland), San Francisco, CA, May 2012. 

	（奥克兰），加利福尼亚州旧金山，2012年5月。

	[27] Pavel Laskov and Nedim Srndic. Static Detection of Malicious 

	Pavel Laskov和Nedim Srndic。恶意软件的静态检测

	JavaScript-Bearing PDF Documents. In Proceedings of the Annual 

	支持JavaScript的PDF文档。在年度会议记录

	Computer Security Applications Conference (ACSAC), 2011. 

	计算机安全应用会议（ACSAC），2011。

	[28] Moony Li. Hacking Team Leak Uncovers Another Windows Zero-Day, 

	[28] Moony Li。黑客团队漏洞发现另一个Windows零日，

	Fixed In Out-Of-Band Patch, 

	固定在带外补丁，

	2015. http://blog.trendmicro.com/trendlabs- securityintelligence/hacking- team- leak- uncovers- anotherwindows- zero- day- ms- releases- patch. 

	http://blog.trendmicro.com/trendlabs- securityintelligence / hacking- team- leak- uncovers- anotherwindows- zero-day-ms- releases- patch。

	[29] Daiping Liu, Haining Wang, and Angelos Stavrou. Detecting Malicious Javascript in PDF through Document Instrumentation. In Proceedings of the 44th International Conference on Dependable Systems and Networks (DSN), Atlanta, GA, 2014. 

	[29]刘大平，王海宁，安东尼奥斯塔夫鲁。通过文档检测在PDF中检测恶意的Javascript。在第44届国际可靠系统和网络会议（DSN），亚特兰大，乔治亚州，2014年。

	[30] Kai Lu and Kushal Arvind Shah. Analysis of Use-After-Free Vulnerability (CVE-2016-4119) in Adobe Acrobat and Reader, 2016. https://blog.fortinet.com/2016/06/06/analysis- ofuse- after- free- vulnerability- cve- 2016- 4119- inadobe- acrobat- and- reader. 

	[30] Kai Lu和Kushal Arvind Shah。在Adobe Acrobat和Reader 2016中分析使用后释放漏洞（CVE-2016-4119）。https://blog.fortinet.com/2016/06/06/analysis- ofuse- after-free- vulnerability-cve -  2016- 4119- inadobe- acrobat-和 -  reader。

	[31] Xun Lu, Jianwei Zhuge, Ruoyu Wang, Yinzhi Cao, and Yan Chen. 

	[31] X UN l U, J Ian为Z胡歌, Ru O喻Wang, yin之CA哦, Andy按C很.

	De-obfuscation and Detection of Malicious PDF Files with High 

	使用高分辨率对恶意PDF文件进行消除混淆和检测

	Accuracy. In Proceedings of the 46th Hawaii International Conference on System Sciences (HICSS), 2013. 

	准确性。在第四十六届夏威夷国际系统科学大会（HICSS）的论文集中，2013。

	[32] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. Pin: Building Customized Program Analyis Tools with Dynamic Instrumentation. In Proceedings of the 2005 

	[32]陆志强，罗伯特·科恩，罗伯特·穆斯，哈里什·帕蒂尔，阿图尔·克劳泽，杰夫·洛尼，史蒂文·华莱士，维杰·贾纳帕·雷迪和金·哈泽伍德。针：使用动态仪器构建定制的程序分析工具。在2005年的诉讼

	ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Chicago, IL, June 2005. 

	ACM SIGPLAN编程语言设计与实施大会（PLDI），芝加哥，IL，2005年6月。

	[33] Davide Maiorca, Davide Ariu, Igino Corona, and Giorgio Giacinto. A Structural and Content-based Approach for a Precise and Robust Detection of Malicious PDF Files. In Proceedings of the International Conference on Information Systems Security and Privacy (ICISSP), 2015. 

	[33]大卫·马奥卡，达维德·阿里乌，伊戈诺·科罗纳和乔治·贾科托。基于结构和内容的方法来精确和可靠地检测恶意PDF文件。在信息系统安全和隐私国际会议（ICISSP），2015年。

	[34] Davide Maiorca, Davide Ariu, Igino Corona, and Giorgio Giacinto. 

	达维德·马奥卡，达维德·阿里乌，伊戈诺·科罗纳和乔治·贾科托。

	An Evasion Resilient Approach to the Detection of Malicious PDF Files. In Proceedings of the International Conference on Information Systems Security and Privacy (ICISSP), 2016. 

	一种逃避弹性的方法来检测恶意的PDF文件。在信息系统安全和隐私国际会议（ICISSP），2016年。

	[35] Davide Maiorca, Igino Corona, and Giorgio Giacinto. Looking at the Bag is not Enough to Find the Bomb: An Evasion of Structural Methods for Malicious PDF Files Detection. In Proceedings of the 8th ACM Symposium on Information, Computer and Communications Security (ASIACCS), Hangzhou, China, March 2013. 

	[35]大卫·马奥卡，Igino Corona和Giorgio Giacinto。查看袋子不够发现炸弹：恶意PDF文件检测结构方法的一种回避。在第八届ACM信息，计算机和通信安全研讨会论文集（ASIACCS），中国杭州，2013年3月。

	[36] Davide Maiorca, Giorgio Giacinto, and Igino Corona. A Pattern Recognition System for Malicious PDF Files Detection. In Proceedings of the 8th International Conference on Machine Learning and Data Mining in Pattern Recognition (MLDM), 2012. 

	[36]大卫·马奥卡，乔治·贾科托和伊洛诺·科罗纳。恶意PDF文件检测模式识别系统。在第8届国际机器学习和模式识别数据挖掘会议（MLDM），2012年的会议记录。

	[37] Felipe Andres Manzano. 

	Felipe Andres Manzano。

	Adobe Reader X BMP/RLE heap corruption, 2012. http://www.binamuse.com/papers/ XFABMPReport.pdf. 

	Adobe Reader X BMP / RLE堆损坏，2012。http://www.binamuse.com/papers/ XFABMPReport.pdf。

	[38] Net MarketShare. Desktop Operating System Market Share, 

	[38] Net MarketShare。桌面操作系统市场份额，

	2017. https://www.netmarketshare.com/operatingsystem- market- share.aspx?qprid=10&qpcustomd=0. 

	https://www.netmarketshare.com/operatingsystem- market- share.aspx？qprid = 10＆qpcustomd = 0。

	[39] Nexor. 

	[39] Nexor。

	Preventing Document-based Malware from Devastating Your Business, 2013. https://www.nexor.com/wpcontent/uploads/2016/02/Preventing- DocumentBased- Malware- from- Devastating- Your- Business.pdf. 

	防止基于文档的恶意软件破坏您的业务，2013. https://www.nexor.com/wpcontent/uploads/2016/02/Preventing- DocumentBased- Malware- from- Devastating- Your- Business.pdf。

	[40] Nir Nissim, Aviad Cohen, Chanan Glezer, and Yuval Elovici. Detection of Malicious PDF Files and Directions for Enhancements: 

	[40] Nir ​​Nissim，Aviad Cohen，Chanan Glezer和Yuval Elovici。恶意PDF文件的检测和增强的方向：

	A State-of-the-art Survey. Computers & Security, October 2014. 

	一项最先进的调查。计算机与安全，2014年10月。

	[41] Roger Orr. NtTrace - Native API tracing for Windows, 2016. http://rogerorr.github.io/NtTrace/. 

	罗杰·奥尔。 NtTrace  - 针对Windows的本地API跟踪，2016。http://rogerorr.github.io/NtTrace/。

	[42] Nicolas Papernot, Patrick McDaniel, Somesh Jha, Matt Fredrikson, Z. Berkay Celik, and Ananthram Swami. The Limitations of Deep Learning in Adversarial Settings. In Proceedings of the 9th European Workshop on System Security (EUROSEC), 2016. 

	[42] Nicolas Papernot，Patrick McDaniel，Somesh Jha，Matt Fredrikson，Z. Berkay Celik和Ananthram Swami。对抗环境下的深度学习的局限性。在第9届欧洲系统安全研讨会（EUROSEC）的会议记录中，2016。

	[43] Babak Salamat, Todd Jackson, Andreas Gal, and Michael Franz. Orchestra: Intrusion Detection Using Parallel Execution and Monitoring of Program Variants in User-space. 

	[43] Babak Salamat，Todd Jackson，Andreas Gal和Michael Franz。乐团：使用并行执行的入侵检测和用户空间中程序变量的监视。

	In Proceedings of the 4th European Conference on Computer Systems (EuroSys), Nuremberg, Germany, March 2009. 

	在第四届欧洲计算机系统会议（EuroSys）会议录，德国纽伦堡，2009年3月。

	[44] Mark Schloesser, Jurriaan Bremer, and Alessandro Tanasi. Cuckoo 

	Mark Schloesser，Jurriaan Bremer和Alessandro Tanasi。布谷鸟

	Sandbox - Open Source Automated Malware Analysis. In Black 

	沙箱 - 开源自动恶意软件分析。黑色

	Hat USA Briefings (Black Hat USA), Las Vegas, NV, August 2013. 

	有美国简报（黑帽美国），拉斯维加斯，NV，2013年8月。

	[45] Florian Schmitt, Jan Gassen, and Elmar Gerhards-Padilla. PDF Scrutinizer: Detecting JavaScript-based Attacks in PDF Documents. In Proceedings of the 10th Annual International Conference on Privacy, Security and Trust (PST), 2012. 

	[45]弗洛里安·施密特，扬·加森，艾玛·格哈德斯 - 帕迪拉。 PDF审查：在PDF文档中检测基于JavaScript的攻击。在第十届年度隐私，安全与信任（PST）年度国际会议论文集中，2012。

	[46] Charles Smutz and Angelos Stavrou. Malicious PDF Detection 

	查理斯米尔斯和十字架的天使。 Daiki的Malikii PTY

	286    26th USENIX Security Symposium 

	286第二十届USENIX安全研讨会

	USENIX Association using Metadata and Structural Features. In Proceedings of the 

	USENIX Association使用元数据和结构特征。在“诉讼程序”中

	Annual Computer Security Applications Conference (ACSAC), 

	年度计算机安全应用会议（ACSAC），

	2012. 

	2012.

	[47] Charles Smutz and Angelos Stavrou. When a Tree Falls: Using Diversity in Ensemble Classifiers to Identify Evasion in Malware Detectors. In Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, February 2016. 

	Charles Smutz和Angelos Stavrou。当一棵树掉下来：利用集合分类器中的多样性来识别恶意软件检测器的规避行为。 2016年2月在加利福尼亚州圣地亚哥举行的“2016年度网络与分布式系统安全研讨会”（NDSS）会刊。

	[48] Kevin Z. Snow, Srinivas Krishnan, Fabian Monrose, and Niels Provos. ShellOS: Enabling Fast Detection and Forensic Analysis of Code Injection Attacks. In Proceedings of the 20th USENIX Security Symposium (Security), San Francisco, CA, August 2011. 

	[48]凯文Z.斯诺，Srinivas克里希南，费边蒙罗斯和尼尔斯Provos。 ShellOS：启用代码注入攻击的快速检测和取证分析。在2011年8月加利福尼亚州旧金山举行的第二十届USENIX安全研讨会（安全性）会议论文集中。

	[49] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra Dmitrienko, Christopher Liebchen, and Ahmad-Reza Sadeghi. Just-In-Time Code Reuse: On the Effectiveness of Fine-Grained 

	[49]凯文Z.斯诺，法罗安Monrose，卢卡斯Davi，亚历山德拉Dmitrienko，克里斯托弗Liebchen和Ahmad-Reza Sadeghi。实时代码重用：关于细粒度的有效性

	Address Space Layout Randomization. 

	地址空间布局随机化。

	In Proceedings of the 

	在“诉讼程序”中

	34th IEEE Symposium on Security and Privacy (Oakland), San 

	第34届IEEE安全和隐私专题讨论会（奥克兰），San

	Francisco, CA, May 2013. 

	加州弗朗西斯科，2013年5月。

	[50] Sophps. 

	[50] Sophos。

	The Rise of Document-based Malware, 2016. https://www.sophos.com/en- us/security- newstrends/security- trends/the- rise- of- documentbased- malware.aspx. 

	基于文档的恶意软件的崛起，2016。https://www.sophos.com/en-us/security-newstrends/security- trends / the-rise-of-documentbased- malware.aspx。

	[51] Alexander Sotirov. Heap Feng Shui in JavaScript. In Proceedings of the 2007 Black Hat Europe Briefings (Black Hat Europe), 

	[51]亚历山大·索蒂罗夫。 JavaScript中堆放风水。在2007年黑帽欧洲简报会（Black Hat Europe）的会议记录中，

	Amsterdam, Netherlands, 2007. 

	阿姆斯特丹，荷兰，2007年。

	[52] Nedim Srndic and Pavel Laskov. Detection of Malicious PDF Files Based on Hierarchical Document Structure. In Proceedings of the 20th Annual Network and Distributed System Security Symposium 

	Nedim Srndic和Pavel Laskov。基于分层文档结构的恶意PDF文件检测。第20届年度网络与分布式系统安全研讨会论文集

	(NDSS), San Diego, CA, February 2013. 

	（NDSS），加州圣地亚哥，2013年2月。

	[53] Nedim Srndic and Pavel Laskov. Practical Evasion of a LearningBased Classifier: A Case Study. In Proceedings of the 35th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2014. 

	Nedim Srndic和Pavel Laskov。基于学习的分类器的实际逃避：个案研究。 2014年5月在加利福尼亚州圣何塞举行的第35届IEEE安全与隐私专题讨论会（奥克兰）会议记录。

	[54] Symantec. 

	赛门铁克。

	2010. https://www.symantec.com/content/en/us/ enterprise/media/security_response/whitepapers/ the_rise_of_pdf_malware.pdf. 

	https://www.symantec.com/content/en/us/ enterprise / media / security_response / whitepapers / the_rise_of_pdf_malware.pdf。

	Portable Document 

	便携式文件

	Format Malware, 

	格式恶意软件，

	[55] Symantec. 

	赛门铁克。

	Internet Security Threat Reports, 

	互联网安全威胁报告，

	2014. http://www.symantec.com/content/en/us/enterprise/ other_resources/b- istr_main_report_v18_2012_ 21291018.en- us.pdf. 

	2014. http://www.symantec.com/content/en/us/enterprise/ other_resources / b- istr_main_report_v18_2012_ 21291018.en- us.pdf。

	[56] Teryl Taylor, Kevin Z. Snow, Nathan Otterness, and Fabian Monrose. Cache, Trigger, Impersonate: Enabling Context-Sensitive Honeyclient Analysis On-the-Wire. In Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, February 2016. 

	Teryl Taylor，Kevin Z. Snow，Nathan Otterness和Fabian Monrose。缓存，触发器，模拟：在线上启用上下文敏感的Honeyclient分析。 2016年2月在加利福尼亚州圣地亚哥举行的“2016年度网络与分布式系统安全研讨会”（NDSS）会刊。

	[57] Trend Micro. Macro Malware: Here’s What You Need to Know in 2016, 2016. http://blog.trendmicro.com/macromalware- heres- what- you- need- to- know- in- 2016/. 

	趋势科技。宏观恶意软件：这是2016年，2016年你需要知道什么。http://blog.trendmicro.com/macromalware- heres-你需要知道 -  2016年。

	[58] Zacharias Tzermias, Giorgos Sykiotakis, Michalis Polychronakis, and Evangelos P. Markatos. Combining Static and Dynamic Analysis for the Detection of Malicious Documents. In Proceedings of the 4th European Workshop on System Security (EUROSEC), 2011. 

	[58] Zacharias Tzermias，Giorgos Sykiotakis，Michalis Polychronakis和Evangelos P. Markatos。静态与动态相结合的恶意文档检测方法。在第四届欧洲系统安全研讨会（EUROSEC）会议记录中，2011。

	[59] Cristina Vatamanu, Drago¸s Gavrilu ¸T, and R ˘azvan Benchea. A 

	[59]克里斯蒂娜Vatamanu，Dragos Gavrilu T和RãazvanBenchea。一

	Practical Approach on Clustering Malicious PDF Documents. 

	恶意PDF文档聚类的实用方法。

	Journal in Computer Virology, June 2012. 

	“计算机病毒学杂志”，2012年6月。

	[60] Kaushik Veeraraghavan, Peter M. Chen, Jason Flinn, and Satish Narayanasamy. Detecting and Surviving Data Races using Complementary Schedules. In Proceedings of the 23rd ACM Symposium on Operating Systems Principles (SOSP), Cascais, Portugal, October 2011. 

	[60] Kaushik Veeraraghavan，Peter M. Chen，Jason Flinn和Satish Narayanasamy。使用补充计划检测和生存数据竞赛。在第二十三届ACM操作系统原理研讨会（SOSP）论文集，葡萄牙卡斯卡伊斯，2011年10月。

	[61] Stijn Volckaert, Bart Coppens, and Bjorn De Sutte. Cloning Your Gadgets: Complete ROP Attack Immunity with Multi-Variant Execution. IEEE Transactions on Dependable and Secure Computing, 

	[61]斯蒂恩沃尔卡特，巴特科普斯和比约恩德苏特。克隆你的小工具：用多变量执行完成ROP攻击豁免。 IEEE Transactions on Dependable and Secure Computing，

	13(4):437–450, July 2016. 

	13（4）：437-450，2016年7月。

	[62] Carsten Willems, Felix C. Freiling, and Thorsten Holz. Using Memory Management to Detect and Extract Illegitimate Code for Malware Analysis. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2012. 

	[62] Carsten Willems，Felix C. Freiling和Thorsten Holz。使用内存管理来检测和提取恶意软件分析的非法代码。在年度计算机安全应用会议（ACSAC），2012年。

	[63] Carsten Willems, Thorsten Holz, and Felix Freiling. Toward 

	[63] Carsten Willems，Thorsten Wood和Felix Freiling。往

	Automated Dynamic Malware Analysis Using CWSandbox. In 

	使用CWSandbox进行自动动态恶意软件分析。在

	Proceedings of the 28th IEEE Symposium on Security and Privacy 

	第二十八届IEEE安全和隐私研讨会论文集

	(Oakland), Oakland, CA, May 2007. 

	（奥克兰），加州奥克兰，2007年5月。

	[64] Shane Wilton. One Shellcode to Rule Them All: CrossPlatform Exploitation, 2014. http://www.slideshare.net/ ShaneWilton/one- shellcode- to- rule- them- all. 

	[64]肖恩威尔顿。一个Shellcode来统治它们全部：CrossPlatform Exploitation，2014。http://www.slideshare.net/ ShaneWilton / one-shellcode- rule- them- all。

	[65] Weilin Xu, Yanjun Qi, and David Evans. Automatically Evading Classifiers: A Case Study on PDF Malware Classifiers. In Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, February 2016. 

	[65]徐维霖，齐彦军，戴维埃文斯。自动逃避分类器：PDF恶意软件分类器的案例研究。 2016年2月在加利福尼亚州圣地亚哥举行的“2016年度网络与分布式系统安全研讨会”（NDSS）会刊。

	[66] Hui Xue, Nathan Dautenhahn, and Samuel T. King. Using Replicated Execution for a More Secure and Reliable Web Browser. In Proceedings of the 19th Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, February 2012. 

	[66]许雪，内森·多腾哈恩和塞缪尔·金。使用复制执行更安全可靠的Web浏览器。在第19届年度网络和分布式系统安全研讨会（NDSS），加利福尼亚州圣迭戈，2012年2月。

	[67] Mark Vincent Yason. Windows 10 Segment Heap Internals. In Black Hat USA Briefings (Black Hat USA), Las Vegas, NV, August 2016. 

	[67] Mark Vincent Yason。 Windows 10段堆内部。在黑帽子美国简报会（黑帽子美国），拉斯维加斯，NV，2016年8月。

	[68] Aydan Yumerefendi, Benjamin Mickle, and Landon P. Cox. Tightlip: Keeping applications from spilling the beans. In Proceedings of the 4th USENIX Symposium on Networked Systems 

	[68]艾登Yumerefendi，本杰明Mickle和兰登体育考克斯。 Tightlip：保持应用程序免于泄露。在第四届USENIX网络系统研讨会论文集中

	Design and Implementation (NSDI), Cambridge, MA, April 2007. 

	设计和实施（NSDI），马萨诸塞州剑桥市，2007年4月。

	USENIX Association 26th USENIX Security Symposium    287 
	USENIX协会第二十六届USENIX安全研讨会287

